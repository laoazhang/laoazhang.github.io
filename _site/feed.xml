<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">

	<title type="text">Laoazhang! Blog</title>
	<subtitle type="text">If you only do what you can do, you will never be more than you are now</subtitle>
	<generator uri="https://github.com/jekyll/jekyll">Jekyll</generator>
	<link rel="self" type="application/atom+xml" href="https://laoazhang.cn/feed.xml" />
	<link rel="alternate" type="text/html" href="https://laoazhang.cn" />
	<updated>2024-02-09T01:23:45-08:00</updated>
	<id>https://laoazhang.cn/</id>
	<author>
	  <name>laoazhang</name>
	  <uri>https://laoazhang.cn/</uri>
	</author>

	
	<entry>
	  <title type="html"><![CDATA[Doodles from Microsoft Beginners Series]]></title>
	  <link rel="alternate" type="text/html" href="https://laoazhang.cn/blog/2021/07/12/microsoft-beginners-sketchnotes/" />
	  <id>https://laoazhang.cn/blog/2021/07/12/microsoft-beginners-sketchnotes</id>
	  <updated>2021-07-12T00:00:00-07:00</updated>
	  <author>
	    <name>laoazhang</name>
	    <uri>https://laoazhang.cn</uri>
	  </author>
	  <content type="html">&lt;p&gt;A year ago, &lt;a href=&quot;https://twitter.com/girlie_mac/status/1280180665367982080&quot;&gt;I joined Microsoft&lt;/a&gt; and it has been an interesting ride so far, despite the fact that I joined during the pademic. (Leaving the previous workplace, Slack without going to office was interesting in a different way though…)&lt;/p&gt;

&lt;p&gt;Although my main focus is supporting Microsoft 365 developer products, I have gotten chances to work on numerous projects outside of the immediate team, including open technologies, education, localization, etc. to keep myself involved in something I have been always working on for my entire tech career, and not tied to the Microsoft proprietary technologies.&lt;/p&gt;

&lt;h2 id=&quot;doodling-for-scientists&quot;&gt;Doodling for scientists&lt;/h2&gt;

&lt;p&gt;One of my re-discovered passion is doodling, especially something technical, which I had neglected for a long time in my tech career.&lt;/p&gt;

&lt;p&gt;My past life was a researcher at am environmental microbiology research lab a long time ago, and my lab had a lot of my doodles on the wall. These were the lab protocols and the doodles included a lot of Erlenmeyer flasks, tubes, Petri dishes, and stuff.&lt;/p&gt;

&lt;p&gt;I remember people kept telling me how the visual reference helped them.&lt;/p&gt;

&lt;h2 id=&quot;doodles-to-help-educating-developers&quot;&gt;Doodles to help educating developers&lt;/h2&gt;

&lt;p&gt;And now I think this can be totally applied for this different type of science— computer science and programming, and my new teammates in Microsoft agree.&lt;/p&gt;

&lt;p&gt;In fact, Microsoft advocacy team fully enbraces the way to support developers with visual helps and already have amazing sketchnote and technical illustration artists who are actually software engineers and program managers, including &lt;a href=&quot;https://twitter.com/sketchthedocs&quot;&gt;Nitya Narasimhan&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/jenlooper&quot;&gt;Jen Looper&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/dasani_decoded&quot;&gt;Dasani Madipalli&lt;/a&gt;, and &lt;a href=&quot;https://twitter.com/manekinekko&quot;&gt;Wassim Chegham&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Recently, we have released a few open-source beginner-focused curriculums on GitHub, including &lt;a href=&quot;https://github.com/microsoft/Web-Dev-For-Beginners&quot;&gt;Web Dev for Beginners&lt;/a&gt; and &lt;a href=&quot;https://github.com/microsoft/ML-For-Beginners&quot;&gt;ML for Beginners&lt;/a&gt;, and I worked on sketchnote-style summaries for some lessons.&lt;/p&gt;

&lt;p&gt;Here are some of my setchnotes—&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Web Dev 101 - Intro programming&lt;/em&gt;
&lt;img src=&quot;/assets/images/articles/2021/07/webdev101-programming.png&quot; alt=&quot;WebDev - Intro Programming&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Machine Learning - Regressions&lt;/em&gt;
&lt;img src=&quot;/assets/images/articles/2021/07/ml-regression.png&quot; alt=&quot;Machine Learning - Regressions&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The curriculums are under MIT license and the content including my sketchnotes are under Creative Commons. The printable versions are &lt;a href=&quot;https://github.com/girliemac/a-picture-is-worth-a-1000-words&quot;&gt;available as TIFF format&lt;/a&gt; too.&lt;/p&gt;

&lt;h2 id=&quot;tech-doodlers--sketchnote-artists-to-follow&quot;&gt;Tech Doodlers &amp;amp; Sketchnote artists to follow&lt;/h2&gt;

&lt;p&gt;If you are also a visual learners who want to follow people who doodle on Twitter, here’s my list!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/nitya&quot;&gt;Nitya Narasimhan&lt;/a&gt; - Cloud, Azure, live sketchnotes, Microsoft tech&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/jenlooper&quot;&gt;Jen Looper&lt;/a&gt; - Web, Vue.js, Microsoft tech&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/dasani_decoded&quot;&gt;Dasani Madipalli&lt;/a&gt; - ML, Microsoft tech&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/manekinekko&quot;&gt;Wassim Chegham&lt;/a&gt; - Web, protocols, Microsoft tech&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/rachelnabors&quot;&gt;Rachel Nabors&lt;/a&gt; - Web, React, comics&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/chiuki&quot;&gt;Chiu-Ki Chan&lt;/a&gt; - Android, live sketchnotes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/corey_latislaw&quot;&gt;Corey Leigh Latislaw&lt;/a&gt; - Android, live sketchnotes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/lariki&quot;&gt;Lara Martín&lt;/a&gt; - Android, live sketchnotes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/VPoltrack&quot;&gt;Virginia Poltrack&lt;/a&gt; - Android, Star Wars&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/Mappletons&quot;&gt;Maggie Appleton&lt;/a&gt; - Web, UX&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/sailorhg&quot;&gt;Amy, a.k.a. sailor mercury&lt;/a&gt; - programming, &lt;a href=&quot;https://shop.bubblesort.io/&quot;&gt;Bubble sort zines&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/b0rk&quot;&gt;Julia Evans&lt;/a&gt; - Unix, programming&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am pretty sure I missed a lot of people here, so please let me know if you know more wonderful techinical artists.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
	  <title type="html"><![CDATA[Support Web Monetization and HODL! — How to receive micropayment in $BTC (or $Ɖoge) on your website]]></title>
	  <link rel="alternate" type="text/html" href="https://laoazhang.cn/blog/2021/02/20/web-monetization-bitcoin/" />
	  <id>https://laoazhang.cn/blog/2021/02/20/web-monetization-bitcoin</id>
	  <updated>2021-02-20T00:00:00-08:00</updated>
	  <author>
	    <name>laoazhang</name>
	    <uri>https://laoazhang.cn</uri>
	  </author>
	  <content type="html">&lt;p&gt;As I am writing this on Feb 20, 2021, Bitcoin (&lt;a href=&quot;https://www.fool.com/quote/crypto/bitcoin/btc/&quot;&gt;CRYPTO:BTC&lt;/a&gt;) has hit a $1 trillion market cap. Investors who thought it was a joke have started jumped into the cryptocurrencies frenzy.&lt;/p&gt;

&lt;p&gt;Although the ideas of decentralized market and blockchain are fascinating, I didn’t think the value of BTC would increase much, so I have spent them on things like yoga pants and flights to Europe. I try not to think about how much worth it in today’s rate. There are just too many what-if scenarios in my life. (BTW, the economy-class ticket I got was about 1.3 BTC. I let you figure it out.)&lt;/p&gt;

&lt;p&gt;Now friends are asking me about advice on cryptocurrency and &lt;a href=&quot;https://www.coinbase.com/join/girlie_mac&quot;&gt;Coinbase referrals&lt;/a&gt;, however, because I can be the worst financial advisor to ruin your life, I am not going to tell you how to invest, or even how to mine in this article, instead, I am going to tell you about &lt;strong&gt;Web Monetization&lt;/strong&gt; and how to receive micropayments in $BTC and other currencies including various cryptocurrencies, like $DOGE if you want, through your website.&lt;/p&gt;

&lt;p&gt;I may sound like I am selling you snake oil, but I just thought this may be a good opportunity to talk about the web standard topic.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2021/02/doge-web-monetization-1000x420.jpg&quot; alt=&quot;doge meme&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;web-monetization--interledger&quot;&gt;Web Monetization &amp;amp; Interledger&lt;/h2&gt;

&lt;p&gt;According to the draft submitted to W3C, &lt;a href=&quot;https://webmonetization.org/specification.html&quot;&gt;Web Monetization&lt;/a&gt; is an API that allows websites to request small payments from users facilitated by the browser and the user’s Web Monetization provider.&lt;/p&gt;

&lt;p&gt;In a nutshell, Web Monetization is an open web API, consists of HTML, JavaScript API, and uses the &lt;a href=&quot;https://interledger.org/&quot;&gt;Interledger protocol&lt;/a&gt;, an open protocol for moving money and enabling payments.&lt;/p&gt;

&lt;h2 id=&quot;implementing-web-monetization&quot;&gt;Implementing Web Monetization&lt;/h2&gt;

&lt;p&gt;Although implementation for browsers is straight-forward, it requires some prerequisits as currently, you need (1) a Web Monetization service provider and (2) an Interledger Protocol-enabled wallet to monetize on web.&lt;/p&gt;

&lt;p&gt;The services I personally use to implement Web Monetization are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://coil.com&quot;&gt;Coil&lt;/a&gt; - Web Monetization service provider&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://uphold.com/signup?referral=5f261fb476&quot;&gt;Uphold&lt;/a&gt; - ILP-enabled wallet&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;How &lt;strong&gt;Coil&lt;/strong&gt; works is that is checks if the website is web monetized, and if it does, stream the payment to the site. A small amount is paid by Coil members, who pay a flat fee to access exclusive content and ad-free experiences. Coil provides browser extensions for browsers including Chrome, Edge, and Firefox, while &lt;a href=&quot;https://www.pumabrowser.com/&quot;&gt;&lt;strong&gt;Puma browser&lt;/strong&gt;&lt;/a&gt; is natively powered on Coil and supports Web Monetization API out of the box.&lt;/p&gt;

&lt;p&gt;And &lt;strong&gt;Uphold&lt;/strong&gt; is a digital wallet that allows you to receive payments with an Interledger payment pointer. This is where you can receive the payment also sell, buy, and trade.&lt;/p&gt;

&lt;h3 id=&quot;setting-up-your-wallet&quot;&gt;Setting up Your Wallet&lt;/h3&gt;

&lt;p&gt;Coil supports multiple wallets, but I am using Uphold to generate your Interledger payment pointer here.&lt;/p&gt;

&lt;p&gt;First, open an &lt;a href=&quot;https://uphold.com/signup?referral=5f261fb476&quot;&gt;Uphold&lt;/a&gt; account.&lt;/p&gt;

&lt;p&gt;Once you signed up and all, you are going to generate an ILP address (Interledger payment pointer).&lt;/p&gt;

&lt;p&gt;Go to &lt;strong&gt;Transact&lt;/strong&gt;, then from the &lt;strong&gt;Anything to Anything&lt;/strong&gt; (Right pane), select &lt;strong&gt;From&lt;/strong&gt; dropdown menu:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2021/02/uphold-transact-01.png&quot; alt=&quot;Screenshot - Uphold 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select &lt;strong&gt;Interledger&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2021/02/uphold-transact-02.png&quot; alt=&quot;Screenshot - Uphold 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then pick a currency of your choice— USD, BTC, ETH, XRP, DOGE… there are 27 fiat currencies and
34 Cryptocurrencies to choose from:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2021/02/uphold-transact-03.png&quot; alt=&quot;Screenshot - Uphold 3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Copy the address that looks like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ilp.uphold.com/SoMethIngLiKEthis0&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2021/02/uphold-transact-04.png&quot; alt=&quot;Screenshot - Uphold 4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You will need the address in Coil (the next step) and in your HTML code later.&lt;/p&gt;

&lt;h3 id=&quot;setting-up-coil&quot;&gt;Setting up Coil&lt;/h3&gt;

&lt;p&gt;There are two membership types— &lt;a href=&quot;https://coil.com/signup&quot;&gt;Coil membership&lt;/a&gt; to support web-monetized content and &lt;a href=&quot;https://coil.com/creator&quot;&gt;creator membership&lt;/a&gt; for you to monetize. I am walking you through the latter—&lt;/p&gt;

&lt;p&gt;First, sign up for a &lt;a href=&quot;https://coil.com/creator&quot;&gt;&lt;strong&gt;Coil creator account&lt;/strong&gt;&lt;/a&gt; and click &lt;strong&gt;Start monetizing. It’s free&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;Once you created your account (and verified your email etc.), you will need to set up your payout wallet.&lt;/p&gt;

&lt;p&gt;Go to &lt;a href=&quot;https://coil.com/settings/payouts&quot;&gt;&lt;strong&gt;Payout&lt;/strong&gt;&lt;/a&gt;, click &lt;strong&gt;Setup&lt;/strong&gt; under &lt;strong&gt;Uphold&lt;/strong&gt; (unless you chose Gatehub as your wallet):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2021/02/coil-payouts-01.png&quot; alt=&quot;Screenshot - Coil 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;and enter the ILP address that you generated at Uphold and save:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2021/02/coil-payouts-02.png&quot; alt=&quot;Screenshot - Coil 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, you are going to include a meta tag with the information on your website to finalize.&lt;/p&gt;

&lt;h2 id=&quot;monetizing-your-web&quot;&gt;Monetizing Your Web&lt;/h2&gt;

&lt;p&gt;If you already have some website or web apps, you are ready to monetize. All you need is to include the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; in your head of HTML:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Welcome to My Homepage&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;monetization&quot;&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$ilp.uphold.com/6NxbkHNq9N84&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Make sure to use your own ILP address as the meta content, unless you want me to receive all of your payment. Then, deploy your web and you are ready to monetize 💰&lt;/p&gt;

&lt;h3 id=&quot;monetizing-your-content-on-devto&quot;&gt;Monetizing Your Content on Dev.to&lt;/h3&gt;

&lt;p&gt;Even if you don’t have your own websites, some content platforms do support Web Monetization. Take a look at the &lt;a href=&quot;https://help.coil.com/docs/monetize/content/platforms&quot;&gt;list of providers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For example, if you write some technical content on Dev.to like I do, you can include your ILP address to monetize your content there too.&lt;/p&gt;

&lt;p&gt;Sign in and go to the &lt;a href=&quot;https://dev.to/settings/misc&quot;&gt;&lt;strong&gt;Settings&lt;/strong&gt;&lt;/a&gt; &amp;gt; &lt;strong&gt;Extensions&lt;/strong&gt; &amp;gt; &lt;strong&gt;Web monetization&lt;/strong&gt;, and enter your ILP address there and save.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2021/02/devto-monetize.png&quot; alt=&quot;devto&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s it. 
Now all you need is to wait to get paid in BTC (or whatever you picked) and HODL ;-)&lt;/p&gt;

&lt;p&gt;I hope you enjoyed the article. Web platform to the moon 🚀🌕&lt;/p&gt;
</content>
	</entry>
	
	<entry>
	  <title type="html"><![CDATA[Spread Syntax "Three-dots" Tricks You Can Use Now]]></title>
	  <link rel="alternate" type="text/html" href="https://laoazhang.cn/blog/2020/06/18/javascript-spread-operator/" />
	  <id>https://laoazhang.cn/blog/2020/06/18/javascript-spread-operator</id>
	  <updated>2020-06-18T00:00:00-07:00</updated>
	  <author>
	    <name>laoazhang</name>
	    <uri>https://laoazhang.cn</uri>
	  </author>
	  <content type="html">&lt;p&gt;&lt;em&gt;This articles is created based on my own &lt;a href=&quot;https://twitter.com/girlie_mac/status/1263955788990566400&quot;&gt;tweet&lt;/a&gt; posted on May 22, 2020&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--fca3o3sF--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/4mqpk334i9k78gaw6q7n.png&quot; alt=&quot;ES6 tricks&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ES6 (ECMAScript 2015, the 6th edition) was finalized 5 years ago, and brought us a significant amount of new syntax and features to help you write complex code better and simpler.&lt;/p&gt;

&lt;p&gt;I am assuming that many of you have consumed more calories from the syntactic sugar by adopting new features like class declarations, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let&lt;/code&gt; / &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const&lt;/code&gt;, and arrow function expression, and so on, but how about some of the lesser-known &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax&quot;&gt;Spread operator&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Here, I would like to share some good usages of spread operator, a.k.a three-dots that I’ve found while I was coding (and StackOverflowing, I don’t lie about how I code!).&lt;/p&gt;

&lt;h2 id=&quot;what-do-three-dots-do&quot;&gt;What do Three Dots do?&lt;/h2&gt;

&lt;p&gt;First, there are two “three-dots” sugars introduced in ES6. One is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters&quot;&gt;&lt;strong&gt;Rest parameter&lt;/strong&gt;&lt;/a&gt;, which allows us to use an arbitrary number of arguments, and another is &lt;strong&gt;Spread operator&lt;/strong&gt;, which also has the similar syntax with three dots, but it is more like the reversed version- it takes the array itself, not arguments.&lt;/p&gt;

&lt;p&gt;In this article, I am showing tricks that uses spread syntax. Looking at the practical examples may be far easier to understand what it does than by reading the definitions!&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;concat&quot;&gt;Concat&lt;/h2&gt;

&lt;p&gt;You say “cat” so I say meow.&lt;/p&gt;

&lt;p&gt;Let’s concatenate two arrays. Here we have two arrays that represent cat fur coat colors:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;solid&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;bicolor&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;tabby&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;calico&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;tortoiseshell&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is how we traditionally did before ES6 using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;concat()&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;conCats&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [&apos;solid&apos;, &apos;bicolor&apos;, &apos;tabby&apos;, &apos;calico&apos;, &apos;tortoiseshell&apos;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now you can simply write with the ES6 spread syntax like this:&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;conCats&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; 
&lt;span class=&quot;c1&quot;&gt;// [&apos;solid&apos;, &apos;bicolor&apos;, &apos;tabby&apos;, &apos;calico&apos;, &apos;tortoiseshell&apos;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;convert-a-string-to-array&quot;&gt;Convert a string to array&lt;/h2&gt;

&lt;p&gt;Have you been asked to reverse a string, or check if a string is a palindrome at job interviews? The questions you got may be more complex, but these are pretty common interview questions for software engineers.&lt;/p&gt;

&lt;p&gt;Anyway, the first step to solve the question is likely to convert the given string to an array.&lt;/p&gt;

&lt;p&gt;You have a given string:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;kitty&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With pre-ES6 JavaScript, use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;split()&lt;/code&gt; to get each letter in an array:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newArr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [&apos;k&apos;, &apos;i&apos;, &apos;t&apos;, &apos;t&apos;, &apos;y&apos;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now with the ES6 spread syntax, you can achieve the same as:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newArr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [&apos;k&apos;, &apos;i&apos;, &apos;t&apos;, &apos;t&apos;, &apos;y&apos;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;find-max-or-min&quot;&gt;Find Max or Min&lt;/h2&gt;

&lt;p&gt;Let’s say, you have a given set of numbers,&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To find the largest (or smallest) number from the set of numbers, you can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Math.max()&lt;/code&gt; (or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Math.min()&lt;/code&gt;) and pass the given numbers as input parameters like this:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now with the ES6 spread syntax, you can pass an array of numbers:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nums&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 12&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;copy-an-array&quot;&gt;Copy an Array&lt;/h2&gt;

&lt;p&gt;You can also create a shallow copy of an array with the spread syntax.&lt;/p&gt;

&lt;p&gt;You have an array,&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;allCatNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;chewie&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;leia&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;yoda&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;chewie&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;luke&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;leia&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And onne way to get a shallow copy of the array with the pre-ES6 is using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;slice()&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;allCatNamesCopy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;allCatNames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now with ES6 spread syntax, you can simply do:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;allCatNamesCopy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;allCatNames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;remove-dups-from-an-array&quot;&gt;Remove Dups from an Array&lt;/h2&gt;

&lt;p&gt;The array, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;allCatNames&lt;/code&gt; above has some duplicated values (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chewie&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;leia&lt;/code&gt; appeared twice in the list). If want to remove the duplicates, you’ll write multiple lines of code with pre-ES6 JavaScript-&lt;/p&gt;

&lt;p&gt;You probably would iterate the array. And at each loop, map each value in an object to track if the key in the object is unique, and if yes, the value is pushed to a new array. Then at the end of the loop, you have the new array only with unique values.&lt;/p&gt;

&lt;p&gt;You can actually achieve this in one line of code with spread syntax by creating a new array with combination of the spread syntax with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set&lt;/code&gt; object:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;catNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[...&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;allCatNames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)];&lt;/span&gt; 
&lt;span class=&quot;c1&quot;&gt;// [&apos;chewie&apos;, &apos;leia&apos;, &apos;yoda&apos;, &apos;luke&apos;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Ta-da, this saves a lot of code!&lt;/p&gt;

&lt;h2 id=&quot;collecting-html-elements-in-an-array&quot;&gt;Collecting HTML Elements in an Array&lt;/h2&gt;

&lt;p&gt;If you are a front-end JavaScript developer, this trick may be useful when you manipulate DOM-&lt;/p&gt;

&lt;p&gt;Let’s say, when you re trying to grab every element with the class name, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.cat&lt;/code&gt;, you probably use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;querySelectorAll()&lt;/code&gt; to get the collection of the DOM nodes.&lt;/p&gt;

&lt;p&gt;But &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;document.querySelectorAll(&apos;.cat&apos;)&lt;/code&gt; returns a static &lt;em&gt;NodeList&lt;/em&gt;, which is an array-like, but not exactly an array that you can iterate over it.&lt;/p&gt;

&lt;p&gt;So in some occasions, you need to convert a NodeList to Array. Traditionally, you probably have been writing code like this, which doesn’t seem so intuitive:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;catElementArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;.cat&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now with the spread syntax, you can rewrite as followings:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;catElementArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[...&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;.cat&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This looks more intuitive, doesn’t it?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Well, if you like the three-dots notation or not, now you see that the spread operator can be quite handy when you work with arrays and objects.&lt;/p&gt;

&lt;p&gt;I would be happy if I just convinced you to use the three-dots in your daily code from now on. Surely, there are more clever ways to write code with using the spread operator, so if you know the tricks, please share with me and the rest of the JS community!&lt;/p&gt;

&lt;h3 id=&quot;wants-to-find-out-more-about-esnext&quot;&gt;Wants to find out more about ES.Next?&lt;/h3&gt;

&lt;p&gt;I will be giving a talk, &lt;em&gt;ECMeowScript - What’s new in JavaScript Explained with Cats&lt;/em&gt; at &lt;a href=&quot;https://forwardjs.com/&quot;&gt;Forward JS&lt;/a&gt; (&lt;del&gt;San Francisco&lt;/del&gt; virtual) in July and &lt;a href=&quot;https://webdirections.org/&quot;&gt;Web Directions&lt;/a&gt; (&lt;del&gt;Sydney&lt;/del&gt; virtual) in September, so I hope you can catch my talk! 🐱&lt;/p&gt;

&lt;p&gt;Ciao!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
	  <title type="html"><![CDATA[Reiwa - JavaScript International Date Format and Japan's New Imperial Era]]></title>
	  <link rel="alternate" type="text/html" href="https://laoazhang.cn/blog/2019/04/02/javascript-i18n-reiwa-era/" />
	  <id>https://laoazhang.cn/blog/2019/04/02/javascript-i18n-reiwa-era</id>
	  <updated>2019-04-02T00:00:00-07:00</updated>
	  <author>
	    <name>laoazhang</name>
	    <uri>https://laoazhang.cn</uri>
	  </author>
	  <content type="html">&lt;p&gt;As Emperor Akihito of Japan is set to abdicate soon, the Japanese government announced on April 1st that the reign of the next emperor will be known as the Reiwa (令和) era.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.cnn.com/cnnnext/dam/assets/190401111401-yoshihide-suga-reiwa-announcement-exlarge-169.jpg&quot; alt=&quot;reiwa&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You may wonder like, “Wait, Japan hasn’t adopted the Gregorian calendar system!?” – Well, yes Japan did over 100 years ago, however, Japan use both “Western” calendar and the unique Japanese Imperial year, which is based on the legendary foundation of Japan by Emperor Jimmu in 660 BC.&lt;/p&gt;

&lt;p&gt;Anyway, what I want to talk about in my blog is not about Japanese history but JavaScript &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Intl.DateTimeFormat&lt;/code&gt; object that enable language and locale specific date and time formatting.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://tc39.github.io/ecma402/&quot;&gt;The ECMAScript Internationalization API&lt;/a&gt; was originally introduced in 2010, and currently in the 6th Edition, to help localize the output of dates, numbers, and currencies in Javascript. And this has been well supported by major browsers now. (See &lt;a href=&quot;https://caniuse.com/#search=Intl&quot;&gt;Can I use&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;One of the property of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Intl&lt;/code&gt; object is &lt;a href=&quot;https://tc39.github.io/ecma402/#datetimeformat-objects&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DateTimeFormat&lt;/code&gt;&lt;/a&gt;, which enable language and locale specific date and time formatting.&lt;/p&gt;

&lt;p&gt;So yes, with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Intl.DateTimeFormat&lt;/code&gt; object, you can automatically print out the Japan local date and time with Japanese imperial era!&lt;/p&gt;

&lt;h2 id=&quot;using-datetimeformat&quot;&gt;Using DateTimeFormat&lt;/h2&gt;

&lt;p&gt;Without specifying a locale / language, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DateTimeFormat&lt;/code&gt; uses the default locale and the default time zone, so when I am on my machine in the US:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Intl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DateTimeFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;returns today’s date in en-US as:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;4/2/2019&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;specifying-locales&quot;&gt;Specifying Locales&lt;/h3&gt;

&lt;p&gt;You can get a localized date and time by using a locale identifier (language code and a country/region code) as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;locales&lt;/code&gt; argument,  for example:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Intl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DateTimeFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ru-RU&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// &quot;02.04.2019&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and Japan is:&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Intl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DateTimeFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ja-JP&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// &quot;2019/4/2&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Okay, but you still see the Gregorian calendar year here. So how can you make it fully localized with Imperial year?&lt;/p&gt;

&lt;p&gt;Well, the locale identifier, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ja-JP&lt;/code&gt;, is not enough and you need to add an extention &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-u-ca-japanese&lt;/code&gt;. I don’t know exactly what it means but all I can say is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ja-JP-u-ca-japanese&lt;/code&gt; is an awkwardly complicated local code.&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;Edited: Thank you, &lt;a href=&quot;https://twitter.com/brandelune&quot;&gt;ジャンクリストフ&lt;/a&gt; for letting me know that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-u&lt;/code&gt; in the identifier indicates an extension, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-ca&lt;/code&gt; says defines a type of calendar, in this case, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-japanese&lt;/code&gt; calendar.
For more info on locale data, see: &lt;a href=&quot;http://www.unicode.org/reports/tr35/#Locale_Extension_Key_and_Type_Data&quot;&gt;Unicode Technical Standard #35&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Intl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DateTimeFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ja-JP-u-ca-japanese&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// &quot;31/4/2&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now, we know it is the year 31. But what year is it? How can we know the Imperial name!?&lt;/p&gt;

&lt;p&gt;To get the whole deal, use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;options&lt;/code&gt; argument, in this case use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;era&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Intl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DateTimeFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ja-JP-u-ca-japanese&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;era&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ta-da! &quot;平成31年4月2日&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Oooh yeah, now you get “平成31年4月2日”!&lt;/p&gt;

&lt;p&gt;Let’s try one more thing with Thai locale:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Intl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DateTimeFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;th-TH-u-nu-thai&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;era&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// &quot;๒ ๔ พุทธศักราช ๒๕๖๒&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Woooh, I have no idea how to read this, but it is the year 2562 in Buddhist calendar!&lt;/p&gt;

&lt;p&gt;Well, you can find details on the options and learn more about this topic on  &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat&quot;&gt;MDN Web Docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, I quickly wrote up this silly little web app called &lt;strong&gt;Is it Reiwa (令和) yet?&lt;/strong&gt; on &lt;a href=&quot;https://reiwa-yet.glitch.me/&quot;&gt;https://reiwa-yet.glitch.me/&lt;/a&gt;. This should say &lt;strong&gt;No&lt;/strong&gt; until May 1, 2019, when Crown Prince Naruhito becomes a new emperor, the imperial year should be changed to 令和元年, &lt;em&gt;if the new era is implemented in your browser!!!&lt;/em&gt; So let’s update your browser and see!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;By the way, I totally didn’t blog on my own website last year, as writing technical tutorials has become a part of my day job, I don’t write when I am not paid as often. I hope I can start writing random technical posts again.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
	  <title type="html"><![CDATA[Notes from Presenting Data & Information course by Edward Tufte]]></title>
	  <link rel="alternate" type="text/html" href="https://laoazhang.cn/blog/2017/12/28/edward-tufte-data/" />
	  <id>https://laoazhang.cn/blog/2017/12/28/edward-tufte-data</id>
	  <updated>2017-12-28T00:00:00-08:00</updated>
	  <author>
	    <name>laoazhang</name>
	    <uri>https://laoazhang.cn</uri>
	  </author>
	  <content type="html">&lt;p&gt;Earlier this month, I finally attended Edward Tufte’s one-day course on &lt;strong&gt;Presenting Data and Information&lt;/strong&gt;, where I learned fundamental design strategies for information displays including sentences, tables, diagrams, maps, charts, images, video, and data visualizations.&lt;/p&gt;

&lt;p&gt;My actual live-notes were several more pages, but I summarized them nicer after the class:&lt;/p&gt;

&lt;h2 id=&quot;notes-from-the-class&quot;&gt;Notes from the Class&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Data paragraph&lt;/li&gt;
  &lt;li&gt;Evidence and conclusion&lt;/li&gt;
  &lt;li&gt;6 fundamental principle of analytical design&lt;/li&gt;
  &lt;li&gt;Presenting Data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2017/12/tufte-data-note-01.jpg&quot; alt=&quot;my notes from Tufte course 1&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Data annotations&lt;/li&gt;
  &lt;li&gt;Data display on maps &amp;amp; topography&lt;/li&gt;
  &lt;li&gt;Words, numbers, and images&lt;/li&gt;
  &lt;li&gt;Meaning and space&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2017/12/tufte-data-note-02.jpg&quot; alt=&quot;my notes from Tufte course 2&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;books-by-tufte&quot;&gt;Books by Tufte&lt;/h3&gt;

&lt;p&gt;If you are interested taking his class too, check out &lt;a href=&quot;https://www.edwardtufte.com/tufte/courses&quot;&gt;the course overview&lt;/a&gt;! The course also includes four books:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/gp/product/1930824165/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;tag=gm063-20&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;linkCode=as2&amp;amp;creativeASIN=1930824165&amp;amp;linkId=a0aca55af5083f3c5e4c1f5e72e37700&quot;&gt;Beautiful Evidence&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/gp/product/0961392142/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;tag=gm063-20&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;linkCode=as2&amp;amp;creativeASIN=0961392142&amp;amp;linkId=74b35f7af67dc8422da8c2f10ec2ae5e&quot;&gt;The Visual Display of Quantitative Information&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/gp/product/0961392118/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;tag=gm063-20&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;linkCode=as2&amp;amp;creativeASIN=0961392118&amp;amp;linkId=a6d33bce12d815dd5098baac95fbaa85&quot;&gt;Envisioning Information &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/gp/product/0961392126/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;tag=gm063-20&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;linkCode=as2&amp;amp;creativeASIN=0961392126&amp;amp;linkId=e83e21e5695ae751143bc9dbef82c36e&quot;&gt;Visual Explanations&lt;/a&gt;: Images and Quantities, Evidence and Narrative&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
	  <title type="html"><![CDATA[Notes from The State of Web Platform]]></title>
	  <link rel="alternate" type="text/html" href="https://laoazhang.cn/blog/2017/12/27/state-of-web-platform/" />
	  <id>https://laoazhang.cn/blog/2017/12/27/state-of-web-platform</id>
	  <updated>2017-12-27T00:00:00-08:00</updated>
	  <author>
	    <name>laoazhang</name>
	    <uri>https://laoazhang.cn</uri>
	  </author>
	  <content type="html">&lt;p&gt;In October, I attended the annual Chrome Dev Summit, which I never missed since the first one.&lt;/p&gt;

&lt;p&gt;I was mostly just listening the talks at the conference, but did make this note form the keynote, “The state of Chrome and the Web Platform” by my former-boss at Palm webOS DevRel, &lt;a href=&quot;https://twitter.com/dalmaer&quot;&gt;Dion Almaer&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/bgalbs&quot;&gt;Ben Galbraith&lt;/a&gt;!&lt;/p&gt;

&lt;h2 id=&quot;notes-from-the-talk&quot;&gt;Notes from the Talk&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2017/12/state-of-web.jpg&quot; alt=&quot;my notes from The State of Web&quot; /&gt;&lt;/p&gt;
</content>
	</entry>
	
	<entry>
	  <title type="html"><![CDATA[GIT PURR! Git Commands Explained with Cats!]]></title>
	  <link rel="alternate" type="text/html" href="https://laoazhang.cn/blog/2017/12/26/git-purr/" />
	  <id>https://laoazhang.cn/blog/2017/12/26/git-purr</id>
	  <updated>2017-12-26T00:00:00-08:00</updated>
	  <author>
	    <name>laoazhang</name>
	    <uri>https://laoazhang.cn</uri>
	  </author>
	  <content type="html">&lt;p&gt;Although I am a “STEM all the way” person (I studied microbiology and worked as a software engineer), I consider myself more a creative side and I am a visual learner – When I learn new things, I tend to doodle rather than writing everything down. Even when I was studying math and logics, I drew everything to understand the concepts.&lt;/p&gt;

&lt;p&gt;Time has passed by and I stopped taking notes with doodles as much as I used to be, until one day I met amazing ladies like &lt;a href=&quot;https://twitter.com/chiuki&quot;&gt;Chiuki&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/corey_latislaw&quot;&gt;Corey&lt;/a&gt; who were sketchnoting at tech conferences, and here I am, so inspired and started doodling again.&lt;/p&gt;

&lt;p&gt;After several attempts and tweets at Google I/O, I started wanting to make &lt;em&gt;my own notes&lt;/em&gt; into something more visually appealing and presentable so that I can share my notes with everybody else who want to learn the same subjects.&lt;/p&gt;

&lt;p&gt;Now I created the git doodles. With cats.
I &lt;a href=&quot;https://twitter.com/girlie_mac/status/905270297128865792&quot;&gt;tweeted&lt;/a&gt;, and my notifications exploded.&lt;/p&gt;

&lt;p&gt;Here’s the series of my doodles. Enjoy!&lt;/p&gt;

&lt;h2 id=&quot;git-purr-git-pull&quot;&gt;git purr (git pull)&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2017/12/git-purr.jpg&quot; alt=&quot;git purr (git pull)&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;git-meowge-git-merge--git-rebase&quot;&gt;git meowge (git merge &amp;amp; git rebase)&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2017/12/git-meowge.jpg&quot; alt=&quot;git meowge (git merge &amp;amp; git rebase)&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;git-puss-git-push&quot;&gt;git puss (git push)&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2017/12/git-puss.jpg&quot; alt=&quot;git puss (git push)&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;git-cherry-pick--git-log&quot;&gt;git cherry-pick &amp;amp; git log&lt;/h2&gt;
&lt;p&gt;Now I “handwrite” the doodle digitally with Procreate on iPad!
&lt;img src=&quot;/assets/images/articles/2017/12/git-cherry-pick.jpg&quot; alt=&quot;git cherry-pick&quot; /&gt;&lt;/p&gt;

</content>
	</entry>
	
	<entry>
	  <title type="html"><![CDATA[Filterous 2 Photo Manipulation Library is Released!]]></title>
	  <link rel="alternate" type="text/html" href="https://laoazhang.cn/blog/2017/02/12/filterous2-release/" />
	  <id>https://laoazhang.cn/blog/2017/02/12/filterous2-release</id>
	  <updated>2017-02-12T00:00:00-08:00</updated>
	  <author>
	    <name>laoazhang</name>
	    <uri>https://laoazhang.cn</uri>
	  </author>
	  <content type="html">&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2017/02/filterous-2.png&quot; alt=&quot;filterous-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I recently released &lt;strong&gt;Filterous 2&lt;/strong&gt;, an open-source Instagram-like image manipulation library for Javascript and node.js on &lt;a href=&quot;https://www.npmjs.com/package/filterous&quot;&gt;npm&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is a revamped version of Filterous, which was written for JavaScript for browser about 4 years ago, and this version works on both Node.js and browser, and comes with pre-defined Instagram-like filters (with the same filter names and very similar effects).&lt;/p&gt;

&lt;p&gt;To see how it works, check out the &lt;a href=&quot;https://girliemac.github.io/filterous-2/demo-browser&quot;&gt;browser demo&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;This demo does not reply on the server, and created solely with front-end JavaScript (and it is vanilla) and browser version of Filterous 2.&lt;/p&gt;

&lt;h2 id=&quot;story-behind-the-project&quot;&gt;Story Behind the Project&lt;/h2&gt;

&lt;p&gt;Between 2012 and 2014, I was a member of W3C’s Core Mobile Community Group. To demonstrate the HTML5 APIs for mobile phones, I have written the demo called &lt;a href=&quot;https://github.com/coremob/camera&quot;&gt;Coremob Camera&lt;/a&gt;, and show this at the W3C booth at Mobile World Congress in Barcelona (&lt;a href=&quot;https://www.w3.org/blog/2013/04/interview-demonstrating-web-ap/&quot;&gt;Interview&lt;/a&gt;) in 2013, and talked about the technologies behind at W3C Conference in San Francisco (&lt;a href=&quot;https://www.youtube.com/watch?v=3Afi-v-m_Gc&quot;&gt;My talk on YouTube&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Basically the app was like a web app version of Instagram (which, we withheld from  using the name for the legal reason.)- you take a picture from the mobile phone camera, and apply a filter to give the glamorous finish. To add a “filter” feature, I wrote some code to manipulate the original jpeg image, and later, I separated the code out of the whole app to open-sourced it as an independent library.&lt;/p&gt;

&lt;p&gt;Four years has passed, and now I decided to make it for node.js, then used &lt;a href=&quot;http://browserify.org/&quot;&gt;Browerify&lt;/a&gt; to export it for browser use.&lt;/p&gt;

&lt;h2 id=&quot;how-it-manipluate-images&quot;&gt;How It Manipluate Images&lt;/h2&gt;

&lt;p&gt;Filterous takes an image into a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;canvas&lt;/code&gt; to manipulate the pixels of the image. Unlike the CSS filters that alters how the image appearance only on browsers, the JavaScript library actually alters the pixel color values. So you can actually download the modified image.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CanvasRenderingContext.getImageData()&lt;/code&gt; method of the Canvas API returns an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ImageData&lt;/code&gt; object representing the underlying pixel data of the canvas, and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt; property of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pixelData&lt;/code&gt; stores the color info of an each pixel in the canvas. (The diagram below shows a canvas size of only 9x9 pixel to make it simple).&lt;/p&gt;

&lt;p&gt;Each pixel in the data array consists of 4 bytes values- red, green, blue, and alpha channel, and each of the R (red), G (green), B (blue) and A (alpha transparency) values can take values between 0 and 255.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/girliemac/filterous-2/blob/master/images/canvas-pixels.png?raw=true&quot; alt=&quot;canvas image manipulation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I referenced numerous sources (credited them in my source code) for the algorithms to alter a color image to grayscale, brighten, saturate, etc. and I used the combinations to give the Instagram-like predefined filters. I probably spent most of my time mimicking the entire set of the filter they offer!&lt;/p&gt;

&lt;p&gt;The source code and documentation are available on &lt;a href=&quot;https://github.com/girliemac/filterous-2&quot;&gt;GitHub&lt;/a&gt;. If you’d like to file bugs or contribute, please feel free to send me issue and pull requests!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
	  <title type="html"><![CDATA[Creating a Simple Facebook Messenger AI Bot with API.ai in Node.js]]></title>
	  <link rel="alternate" type="text/html" href="https://laoazhang.cn/blog/2017/01/06/facebook-apiai-bot-nodejs/" />
	  <id>https://laoazhang.cn/blog/2017/01/06/facebook-apiai-bot-nodejs</id>
	  <updated>2017-01-06T00:00:00-08:00</updated>
	  <author>
	    <name>laoazhang</name>
	    <uri>https://laoazhang.cn</uri>
	  </author>
	  <content type="html">&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2017/01/cover-facebook-apiai-bot.png&quot; alt=&quot;Facebook Messenger Bot with api.ai&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hey, happy new year!!!&lt;/p&gt;

&lt;p&gt;Previously, I created a &lt;a href=&quot;http://www.girliemac.com/slack-httpstatuscats/&quot;&gt;HTTP Status Cats bot for Slack&lt;/a&gt; (and its tutorial on &lt;a href=&quot;https://medium.com/@girlie_mac/creating-a-slack-command-bot-from-scratch-with-node-js-distribute-it-25cf81f51040#.12dzr1mx1&quot;&gt;Medium&lt;/a&gt;), and this time I tried with &lt;strong&gt;Facebook Messenger&lt;/strong&gt; with some interesting 3rd party APIs, and I decide to give &lt;strong&gt;API.ai&lt;/strong&gt; a try.&lt;/p&gt;

&lt;p&gt;As you may have heard of, API.ai, which recently acquired by Google, provides a conversational platform for natural language processing and it allows us to create bots easily.&lt;/p&gt;

&lt;p&gt;Writing apps with the services aren’t hard, however it requires some time reading the docs to figure out how to set them up, so I would like to share my experiences as this tutorial so hopefully you can write your bot in less time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/girliemac/fb-apiai-bot-demo/master/public/images/fb-bot.gif&quot; alt=&quot;messenger bot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are two major parts:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Setting up a Facebook Messenger App and writing the webhook&lt;/li&gt;
  &lt;li&gt;Using API.ai Small Talk domain and creating a custom Intents&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;My step-by-step instruction uses Node.js, so if you’d like to follow the how-to, make sure &lt;a href=&quot;https://nodejs.org&quot;&gt;Node.js&lt;/a&gt; is installed on your machine.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/girliemac/fb-apiai-bot-demo/tree/tutorial-01&quot;&gt;&lt;strong&gt;The source code&lt;/strong&gt;&lt;/a&gt; (on &lt;em&gt;tutorial-01&lt;/em&gt; branch) is on GitHub.&lt;/p&gt;

&lt;p&gt;*(Updated on Jan 9: The bot has been approved by Facebook so you can try the bot!) *
&lt;strong&gt;Live Demo&lt;/strong&gt; -  Scan the code below (the one looks sort of like a QR code) from the Messenger App on mobile, or access on m.me/tomomiBot from browser.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/girliemac/fb-apiai-bot-demo/master/public/images/messenger-scan-code.png&quot; alt=&quot;Facebook scan code&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-developing-a-facebook-messenger-app&quot;&gt;1. Developing a Facebook Messenger App&lt;/h2&gt;

&lt;p&gt;Before configuring your Messenger app on Facebook Developer, let’s create a bare minimum webhook with Node.js to get started.&lt;/p&gt;

&lt;h3 id=&quot;setting-up-a-temporary-webhook-endpoint-with-ngrok&quot;&gt;Setting Up a Temporary Webhook Endpoint with ngrok&lt;/h3&gt;

&lt;p&gt;I choose &lt;strong&gt;ngrok&lt;/strong&gt; to serves a localhost to a public URL because it is simple and easy to use. This URL will be used as a Messenger webhook endpoint during the development, so you don’t need to deploy to a server until the app is completed.&lt;/p&gt;

&lt;p&gt;Download &lt;a href=&quot;https://ngrok.com/&quot;&gt;ngrok&lt;/a&gt;, install it on your machine, and run with a port number, let’s use 5000:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ngrok http 5000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When you start ngrok, it will display a public URL of your tunnel in the terminal. We will need the URL later when setting up the Facebook app. (In the screenshot, the URL is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://47ba4dd4.ngrok.io&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2017/01/ngrok.png&quot; alt=&quot;ngrok&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;writing-a-webhook-with-expressjs&quot;&gt;Writing a Webhook with Express.js&lt;/h3&gt;

&lt;p&gt;Create your app directory and set up your Node.js app:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once you configure your app, install &lt;strong&gt;Express&lt;/strong&gt; and &lt;strong&gt;body-parser&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm install express body-parser --save
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;webhook.js&lt;/code&gt;, and instantiate express and listen the server to port 5000, or whatever the port you have set with ngrok:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bodyParser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;body-parser&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bodyParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bodyParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;urlencoded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;extended&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PORT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Express server listening on port %d in %s mode&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, create HTTP GET and POST route method to handle the command:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* For Facebook Validation */&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/webhook&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;hub.mode&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;hub.verify_token&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;tuxedo_cat&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;hub.challenge&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;403&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* Handling all messenges */&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/webhook&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;messaging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nf&quot;&gt;sendMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is how you receive messages to your webhook via Facebook Messenger- All requests should come via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post&lt;/code&gt;, while the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET&lt;/code&gt; route is only used at the time you configure your Facebook app.&lt;/p&gt;

&lt;p&gt;Where you see the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tuxedo_cat&lt;/code&gt;, just use an arbitrary string. You will need later when setting up your Facebook app.&lt;/p&gt;

&lt;p&gt;Run the code, and go to the next step.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;node webhooks.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;setting-up-a-facebook-app&quot;&gt;Setting Up a Facebook App&lt;/h3&gt;

&lt;p&gt;You need a &lt;strong&gt;Facebook Page&lt;/strong&gt; to set up your chat bot. Create one from &lt;a href=&quot;https://www.facebook.com/pages/create&quot;&gt;facebook.com/pages/create&lt;/a&gt;. Choose a category, and select a sub category from the dropdown and fill out the required filed. Then click &lt;strong&gt;Get Started&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2017/01/create-a-page.png&quot; alt=&quot;FB Page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then create an app at &lt;a href=&quot;https://developers.facebook.com/quickstarts/?platform=web&quot;&gt;developers.facebook.com/quickstarts&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Give it a name and click the button, then fill out the required info:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2017/01/create-an-app.png&quot; alt=&quot;Create a FB App&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once your app is created, follow the steps to configure or skip it to your Dashboard.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2017/01/FB-dashboard.png&quot; alt=&quot;Create a FB App&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Add Product&lt;/strong&gt; from the left menu, then choose &lt;strong&gt;Messenger&lt;/strong&gt;. Click Get Started.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2017/01/create-an-app-add-product.png&quot; alt=&quot;Create a FB App&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At the &lt;strong&gt;Token Generation&lt;/strong&gt;, (1) choose the page you just created from the dropdown menu, and it will generate a token (2) that you will need to include in your node code.&lt;/p&gt;

&lt;p&gt;Then, at the &lt;strong&gt;Webhooks&lt;/strong&gt;, (3) click the &lt;strong&gt;Setup Webhooks&lt;/strong&gt; button:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2017/01/create-an-app-messenger.png&quot; alt=&quot;Create a FB App&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the dialog, fill out the (1) &lt;strong&gt;Callback URL&lt;/strong&gt; with your ngrok URL, (2) the random string for validation (the one you’ve specified in your ‘GET’ route in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;webhook.js&lt;/code&gt;), then (3) check &lt;strong&gt;messages&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2017/01/create-an-app-messenger-webhook.png&quot; alt=&quot;Create a FB App&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click the &lt;strong&gt;Verify and Save&lt;/strong&gt;. If you get a red icon with &lt;strong&gt;x&lt;/strong&gt; at the Callback URL, it means the URL is not validated- either the URL is wrong or your node code is not properly running. Otherwise, you are ready to get back to code.&lt;/p&gt;

&lt;h3 id=&quot;writing-a-super-simple-chat-bot&quot;&gt;Writing a Super Simple Chat Bot&lt;/h3&gt;

&lt;p&gt;Install &lt;strong&gt;request&lt;/strong&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST&lt;/code&gt; messages:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;request &lt;span class=&quot;nt&quot;&gt;--save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Continue with your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;webhook.js&lt;/code&gt;, let’s implement &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sendMessage()&lt;/code&gt; that simply replies the sender an echo to just test your Messenger bot:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sendMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sender&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://graph.facebook.com/v2.6/me/messages&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;qs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;access_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PAGE_ACCESS_TOKEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;recipient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;function &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Error sending message: &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Error: &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Where you see the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PAGE_ACCESS_TOKEN&lt;/code&gt;, use the generated token.&lt;/p&gt;

&lt;p&gt;Try running the code. This acts as a very simple bot, which interact the Messenger platform to receive a message and echo the message as the reply- Go to [https://m.me/YOUR-PAGE] and start a conversation. If your the simple bot works correctly, it just replies the exactly what you send:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2017/01/facebook-basic.gif&quot; alt=&quot;Simple echo bot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Your entry is simply echoed back. This is boring, so let’s use API.ai next to make this conversation more interesting.&lt;/p&gt;

&lt;h2 id=&quot;2-using-apiai-with-your-facebook-messenger-bot&quot;&gt;2. Using API.ai with Your Facebook Messenger Bot&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://api.ai&quot;&gt;API.ai&lt;/a&gt; allows developers to integrate your app with the AI system with speech-to-text and natural language processing.&lt;/p&gt;

&lt;p&gt;Let’s get started with API.ai by &lt;a href=&quot;https://console.api.ai&quot;&gt;sigining up&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you get your account, create an agent. You can either click the button that says &lt;strong&gt;CREATE AGENT&lt;/strong&gt; or from the menu.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2017/01/apiai-create-agent.png&quot; alt=&quot;Create a FB App&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Give it a name and fill out the required info:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2017/01/apiai-agent-setup.png&quot; alt=&quot;Create a FB App&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Make sure to click the &lt;strong&gt;Save&lt;/strong&gt; button on the top every time you make changes.&lt;/p&gt;

&lt;h3 id=&quot;making-small-talk-with-your-messenger-bot&quot;&gt;Making “Small Talk” with your Messenger Bot&lt;/h3&gt;

&lt;p&gt;Instead of having your bot just echo you, let’s give it the API.ai’s Small Talk feature. This gives your bot an ability to have simple conversations.&lt;/p&gt;

&lt;p&gt;From the left menu (if the menu is not visible, click the “Hamburger menu icon” at the top left to open), click &lt;strong&gt;Domains&lt;/strong&gt;, then activate the &lt;strong&gt;Small Talk&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2017/01/apiai-small-talk.png&quot; alt=&quot;Create a FB App&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once activated, click &lt;strong&gt;View details&lt;/strong&gt; then turn on the &lt;em&gt;Fulfillment&lt;/em&gt; so that you can later use this feature in your app and customize.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2017/01/apiai-small-talk-desc.png&quot; alt=&quot;Create a FB App&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Try the &lt;strong&gt;Console&lt;/strong&gt; at the right hand side. You can either speak or type to test the Small Talk domain:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2017/01/apiai-console.png&quot; alt=&quot;Create a FB App&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now let’s use this feature in your bot. You can always come back here to customize the conversations.&lt;/p&gt;

&lt;h4 id=&quot;using-apiai-with-nodejs&quot;&gt;Using API.ai with Node.js&lt;/h4&gt;

&lt;p&gt;It is actually possible to integrate API.ai with FB Messenger without programming, however, to make it fully customize in the way you want to interact with your FB app, let’s use the service programmatically.&lt;/p&gt;

&lt;p&gt;First, install &lt;a href=&quot;https://www.npmjs.com/package/apiai&quot;&gt;API.ai node.js library&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;apiai
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You need your API.ai API key and API secret to use the service with your bot. From the menu, click the “Config” icon to get your API key (“Client access token”):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2017/01/apiai-apikey.png&quot; alt=&quot;Create a FB App&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And go back to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;webhook.js&lt;/code&gt; and initialize &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apiai&lt;/code&gt; with the API key:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apiaiApp&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;apiai&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CLIENT_ACCESS_TOKEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Refer the usage on its &lt;a href=&quot;https://www.npmjs.com/package/apiai&quot;&gt;npm doc&lt;/a&gt;. It is pretty simple- you just pass a text to API.ai, and do something when you get the response (the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;response&lt;/code&gt; event).&lt;/p&gt;

&lt;p&gt;Now, let’s modify the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sendMessage()&lt;/code&gt; :&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sendMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sender&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;apiai&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;apiaiApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;textRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;sessionId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;tabby_cat&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// use any arbitrary id&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;apiai&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Got a response from api.ai. Let&apos;s POST to Facebook Messenger&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;apiai&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;apiai&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What the code sample above doing is basically getting the info (passed as a param) sent from a user via Messenger, and pass the text content to API.ai. Once the API.ai returns the answer, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;response&lt;/code&gt; event is triggered.&lt;/p&gt;

&lt;p&gt;Where you see the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;// Got a response…&lt;/code&gt; comment in the code sample above, let’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST&lt;/code&gt; the response to the Messenger API:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;apiai&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aiText&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fulfillment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;speech&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://graph.facebook.com/v2.6/me/messages&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;qs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;access_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PAGE_ACCESS_TOKEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;recipient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aiText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Error sending message: &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Error: &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, let’s test your bot. Run the node code, and try sending some messages. If everything is working, you should get replies from the bot:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2017/01/facebook-apiai-smalltalk.gif&quot; alt=&quot;Tada! Bot with api.ai&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Awesome.&lt;/p&gt;

&lt;h3 id=&quot;making-the-bot-tell-you-weather-condition&quot;&gt;Making the Bot Tell You Weather Condition&lt;/h3&gt;

&lt;p&gt;When you activate the Small Talk from the &lt;strong&gt;Domains&lt;/strong&gt;, you may have noticed there are more presets like Weather and Flight Schedules, etc. To use these services, it looks like you need to send inquiry to their sales peeps.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2017/01/apiai-domains.png&quot; alt=&quot;api.ai domains&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, of course as an engineer, you can always call the 3rd party APIs to add the features by yourself instead of just flipping the switch and pay. So let’s make your bot to tell users the current weather forecast with the &lt;a href=&quot;http://openweathermap.org/current&quot;&gt;Open Weather Map API&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The goal here is that when a user ask something like “How is the weather in San Francisco?”, your bot will reply with the current weather condition in the given city.&lt;/p&gt;

&lt;h4 id=&quot;creating-weather-intents&quot;&gt;Creating Weather Intents&lt;/h4&gt;

&lt;p&gt;First, to customize the conversational user interfaces, you need to understand &lt;a href=&quot;https://docs.api.ai/docs/key-concepts&quot;&gt;the key concepts&lt;/a&gt; of API.ai, especially &lt;strong&gt;Entities&lt;/strong&gt; and &lt;strong&gt;Intents&lt;/strong&gt; for now.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Intents&lt;/strong&gt; represent a mapping between what a user says and what action should be taken by your software. To make your bot reply the user with a weather info, you need to create a specific Intents.&lt;/p&gt;

&lt;p&gt;From the menu, go to &lt;strong&gt;Intents&lt;/strong&gt; and click the CRETAE INTENT button:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2017/01/apiai-intents-00.png&quot; alt=&quot;api.ai intents&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Give it a name, such as &lt;em&gt;weather.city&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Then create some contexts. Enter a phrase like, “How is the weather in San Francisco?”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2017/01/apiai-intents-01.png&quot; alt=&quot;api.ai intents&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select the city name (“San Francisco”), and you will get a popup. What you see here are pre-defined &lt;strong&gt;entities&lt;/strong&gt;. There are many entities in the list but what you need here is a collection of cities. So choose &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@sys.geo-city&lt;/code&gt;. The city name will be highlighted.&lt;/p&gt;

&lt;p&gt;Major city names have been provided already so you do not need to create them, however if you need to define special entities that not listed there, such as types of cars, food, etc, you will need to create manually. (I am not covering how to define entities in this article this time!)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2017/01/apiai-intents-02.png&quot; alt=&quot;api.ai intents&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Create some more contexts:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2017/01/apiai-intents-03.png&quot; alt=&quot;api.ai intents&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then (1) scroll down to &lt;strong&gt;Action&lt;/strong&gt;, and enter “weather”. You need this action name on your node code later. Then (2) at &lt;strong&gt;Response&lt;/strong&gt;, enter a default response. Assuming a user ask about the weather without specifying a city, enter something like “Which city?”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2017/01/apiai-intents-04.png&quot; alt=&quot;api.ai intents&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Save the Intents, and go to &lt;strong&gt;Fulfillment&lt;/strong&gt; from the menu. Enable the webhook, and enter the ngrok URL with a route, let’s call it &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/ai&lt;/code&gt; and Save:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2017/01/apiai-webhook.png&quot; alt=&quot;api.ai intents&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;using-the-3rd-party-api-to-look-up-the-weather&quot;&gt;Using the 3rd Party API to Look Up the Weather&lt;/h4&gt;

&lt;p&gt;Go to &lt;a href=&quot;http://openweathermap.org/&quot;&gt;Open Weather Map&lt;/a&gt;, and sign up to get the API key. We are going to use the API to fetch a &lt;a href=&quot;http://openweathermap.org/current&quot;&gt;current weather data&lt;/a&gt; for one location.&lt;/p&gt;

&lt;p&gt;Let’s just use this REST API with a city name as a param (also, your API key and the temperature unit):&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;restUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;http://api.openweathermap.org/data/2.5/weather?units=imperial&amp;amp;APPID=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;WEATHER_API_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;amp;q=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;webhook.js&lt;/code&gt;, create another &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST&lt;/code&gt; method route, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/ai&lt;/code&gt;. Remember the action name you’ve specified with API.ai console earlier:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/ai&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;weather&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;city&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;geo-city&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;restUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;http://api.openweathermap.org/data/2.5/weather?APPID=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;WEATHER_API_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;amp;q=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;restUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;statusCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;weather&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; and the temperature is &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; ℉&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;speech&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;displayText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;weather&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;errorType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;I failed to look up the city name.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}});&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Make sure to return is as JSON that api.ai will read from this webhook.&lt;/p&gt;

&lt;p&gt;Let’s test your bot from Messenger:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2017/01/facebook-apiai-weather.gif&quot; alt=&quot;FB Messenger weather bot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yay, now you have your own Messenger bot that chats and answer weather info!&lt;/p&gt;

&lt;p&gt;If you deploy your bot, make sure to change your webhook endpoints on both Facebook Developer app setting and API.ai Fulfillment.&lt;/p&gt;

&lt;p&gt;I hope you enjoyed the article. Now you can tailor your intents, add more features, and use the training feature for better results to make your bot more interesting!&lt;/p&gt;

&lt;h3 id=&quot;by-the-way&quot;&gt;By the way…&lt;/h3&gt;

&lt;p&gt;I am currently working at &lt;a href=&quot;https://nexmo.com&quot;&gt;Nexmo&lt;/a&gt; and we are working on the Chat API, which integrate multiple chat apps including Facebook, WeChat, LINE, etc. So if you have a business with customers from all over the world especially the countries like China where the Great Firewall prevents people to use Facebook, and if you’d like to set up a customer support chat system, you need to support something like WeChat too.&lt;/p&gt;

&lt;p&gt;The Nexmo Chat API can connect multiple chat apps all together. Also there is the SMS API too. I will write about the Chat API soon on &lt;a href=&quot;https://nexmo.com/blog&quot;&gt;Nexmo Blog&lt;/a&gt;!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
	  <title type="html"><![CDATA[Creating a Slack Command Bot from Scratch with Node.js & Distribute It]]></title>
	  <link rel="alternate" type="text/html" href="https://laoazhang.cn/blog/2016/10/24/slack-command-bot-nodejs/" />
	  <id>https://laoazhang.cn/blog/2016/10/24/slack-command-bot-nodejs</id>
	  <updated>2016-10-24T00:00:00-07:00</updated>
	  <author>
	    <name>laoazhang</name>
	    <uri>https://laoazhang.cn</uri>
	  </author>
	  <content type="html">&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2016/10/slack-httpstatuscats-icons.png&quot; alt=&quot;Slack HTTP Status Cats icons&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It was raining on a few weekends ago, instead of binge-watching some Netflix shows I decided to do some small project with the Conversational UI / Chatbot, and wrote the &lt;a href=&quot;http://www.girliemac.com/slack-httpstatuscats/&quot;&gt;HTTP Status Cats command for Slack&lt;/a&gt;! Basically, I made my &lt;a href=&quot;http://http.cat&quot;&gt;HTTP cats&lt;/a&gt; (that gave myself a 15 minutes of fame in 2011) into a slash command for &lt;a href=&quot;https://slack.com&quot;&gt;Slack&lt;/a&gt;, where can simply type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/httpstatus&lt;/code&gt; followed by a status code (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;404&lt;/code&gt;) on Slack chat and get the status description with the cat pics. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.girliemac.com/slack-httpstatuscats/public/images/slack-httpstatuscats.gif&quot; alt=&quot;HTTP Status Cats Slack bot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Although I made some positive notes on its developer-friendliness of the &lt;a href=&quot;https://api.slack.com&quot;&gt;Slack’s API&lt;/a&gt; docs in my &lt;a href=&quot;https://medium.com/@girlie_mac/developer-experience-matters-8c4dcb8cc80#.j74b4p2iw&quot;&gt;Developer Experiences Matters&lt;/a&gt; article, I found it a bit confusing when I actually started developing along with the docs, because there are loaded with info and it is hard to find some resources I need. While developing I took notes of each step, so I decided to share how I have created the HTTP Status Cats command.&lt;/p&gt;

&lt;p&gt;There are two parts. You can stop after the step 1 if you don’t wish to distribute your bot:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Writing a slash command with Node.js and run it locally only on your team&lt;/li&gt;
  &lt;li&gt;Making it installable for public (so you can submit your bot to &lt;a href=&quot;https://slack.com/apps&quot;&gt;Slack’s App Directory&lt;/a&gt; if you want)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;My step-by-step instruction uses Node.js, so if you’d like to follow the how-to, make sure &lt;a href=&quot;https://nodejs.org&quot;&gt;Node.js&lt;/a&gt; is installed on your machine.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/girliemac/slack-httpstatuscats&quot;&gt;The source code&lt;/a&gt; and the &lt;a href=&quot;http://www.girliemac.com/slack-httpstatuscats/&quot;&gt;HTTP Status Cats command bot app&lt;/a&gt; are both available on GitHub&lt;/p&gt;

&lt;h2 id=&quot;1-creating-your-private-slash-command&quot;&gt;1. Creating Your Private Slash Command&lt;/h2&gt;

&lt;p&gt;In Slack’s official term, what you are going to do is called &lt;a href=&quot;https://api.slack.com/custom-integrations&quot;&gt;Custom Integrations&lt;/a&gt;. Before building what they call App, you need this dry-run on your chat room. If you don’t have your own test team account, &lt;a href=&quot;https://slack.com/create&quot;&gt;create one&lt;/a&gt; to get started.&lt;/p&gt;

&lt;h3 id=&quot;configuring-your-slash-command&quot;&gt;Configuring Your Slash Command&lt;/h3&gt;

&lt;p&gt;Sign in to your Slack account and choose your command at &lt;a href=&quot;https://my.slack.com/services/new/slash-commands&quot;&gt;my.slack.com/services/new/slash-commands&lt;/a&gt;. In my case, I entered &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/httpstatus&lt;/code&gt; and hit the &lt;strong&gt;Add Slash Command Integration&lt;/strong&gt; button to go to the next page.&lt;/p&gt;

&lt;p&gt;You will see the Outgoing payload data with a token etc, but you don’t need to worry about this in this moment. Just go ahead and fill out some of the fields.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2016/10/slack-config-custom-integration.png&quot; alt=&quot;Slack config&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can skip most of the field for now, but you must enter the (1) Command, (2) URL, and make sure the (3) Method is POST.&lt;/p&gt;

&lt;p&gt;Once you enter them correctly, you should see the “Your settings have been saved!” message on top of the screen for a few seconds.&lt;/p&gt;

&lt;p&gt;For the &lt;strong&gt;URL&lt;/strong&gt;, I am using a temporary URL from &lt;a href=&quot;https://ngrok.com/&quot;&gt;ngrok&lt;/a&gt;, which serves my localhost to a public URL. You can probably just put your localhost URL such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://localhost:3000.&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;optional-using-ngrok&quot;&gt;Optional: Using ngrok&lt;/h4&gt;

&lt;p&gt;If you wish to use ngrok for your development too, download ngrok from https://ngrok.com, run it on terminal:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ngrok http 3000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2016/10/ngrok.png&quot; alt=&quot;ngrok&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now you’ve got a ngrok URLs for your local server. In this case, localhost:3000. In this case, copy this URL, http://71f03962.ngrok.io and paste it into the configuration setup.&lt;/p&gt;

&lt;h3 id=&quot;writing-the-response-with-nodejs&quot;&gt;Writing the Response with Node.js&lt;/h3&gt;

&lt;p&gt;How it works is that when a user trigger the slash command from Slack client’s interface, the message will be sent to the URL via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP POST&lt;/code&gt; (or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET&lt;/code&gt; if you specified in your config).&lt;/p&gt;

&lt;p&gt;When you receive a request from your user, for instance, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/httpstatus 302&lt;/code&gt;, the data that will be posted to your URL looks like:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/httpstatus
&lt;span class=&quot;nv&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;302
&lt;span class=&quot;nv&quot;&gt;response_url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;https://hooks.slack.com/commands/1234/5678
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Your bot gives a response for the command, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/httpstatus 302&lt;/code&gt; with an answer. In this case the bot will answer with the description of status code 302 with [a cat picture](https://http.cat/302.&lt;/p&gt;

&lt;p&gt;Now. let’s write the response with Node.js using Express.&lt;/p&gt;

&lt;p&gt;First, install Express.JS and body-parser (for POST):&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;express body-parser &lt;span class=&quot;nt&quot;&gt;--save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create a &lt;strong&gt;index .js&lt;/strong&gt; file, and instantiate express and listen the server to port 3000. Because you have set your ngrok to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost:3000&lt;/code&gt;, you must use the same port!&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;use strict&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;express&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bodyParser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;body-parser&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bodyParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bodyParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;urlencoded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;extended&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Express server listening on port %d in %s mode&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, create HTTP POST route method to handle the command:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// implement your bot here ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, you need to look for the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;text&lt;/code&gt;, which comes from a user. To create a HTTP Status bot, the query should be something like “404” for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/httpstatus&lt;/code&gt; command. You should write some error-checking code to see if you’re getting a right value. If a user enter a wrong value, throw some error or send a message, for example, look only for a digit:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/^&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\d&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;+$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// not a digit&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;U R DOIN IT WRONG. Enter a status code like 200!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This message is sent privately to the user who entered a command with an unexpected value.&lt;/p&gt;

&lt;p&gt;If the value is what you expect, send a response in JSON:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;response_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;in_channel&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// public to the channel&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;302: Found&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;attachments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;image_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://http.cat/302.jpg&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The answer to the correct command from the user will be displayed publicly by setting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;response_type&lt;/code&gt; as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;in_channel&lt;/code&gt; (The default type is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ephemeral&lt;/code&gt;, sent as a private message).&lt;/p&gt;

&lt;p&gt;This response will look like this on Slack:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2016/10/slack-command.png&quot; alt=&quot;Slack command public message&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this example, I am using two parts in the response; (1) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;text&lt;/code&gt; and (2) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attachments&lt;/code&gt;, which is an additional field displayed within the gray border, where I include an image.&lt;/p&gt;

&lt;p&gt;Of course you can display text and change the border color in the attachment if you want. To customize the message format, see &lt;a href=&quot;https://api.slack.com/docs/message-formatting&quot;&gt;Basic message formatting&lt;/a&gt; on Slack API docs.&lt;/p&gt;

&lt;p&gt;Please note that in this code sample above, I hard-code the text and image URL, but in &lt;a href=&quot;https://github.com/girliemac/slack-httpstatuscats&quot;&gt;my actual code&lt;/a&gt;, I keep all text strings in a separated file, and look it up if the user query matches. If not, display an error message privately.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2016/10/slack-command-private.png&quot; alt=&quot;Slack command private message&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, run the node code, then test your command on Slack client!&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;node index.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If everything works fine on your private Slack chat, and you are happy as if, you’re done with the custom integration!&lt;/p&gt;

&lt;p&gt;In the next step, you will handle the authentication and deploy the code. So if you want to distribute your command bot, read on!&lt;/p&gt;

&lt;h2 id=&quot;2-distributing-your-slack-bot&quot;&gt;2. Distributing your Slack Bot&lt;/h2&gt;

&lt;p&gt;To share your custom integration, you need to deploy the code and make it installable. To do so, you need to work on a few more things.&lt;/p&gt;

&lt;h3 id=&quot;setting-up-your-app&quot;&gt;Setting up Your App&lt;/h3&gt;

&lt;p&gt;Now you need to register for your app and get your API keys.&lt;/p&gt;

&lt;p&gt;First, go to &lt;a href=&quot;https://api.slack.com/apps&quot;&gt;https://api.slack.com/apps&lt;/a&gt;, and click the &lt;strong&gt;Create an App&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2016/10/slack-create-app.png&quot; alt=&quot;Slack Create App&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can fill out the rest of the form later. The App config may be a bit confusing because there are multiple parts (and you may not even notice everything first). For a slash command bot, you need to fill out at least these sections:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Basic Information (at https://api.slack.com/apps/YOUR_APP_ID/general)&lt;/li&gt;
  &lt;li&gt;OAuth &amp;amp; Permissions (at …/YOUR_APP_ID/oauth)&lt;/li&gt;
  &lt;li&gt;Slash Commands (at …/YOUR_APP_ID/slash-commands)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;keeping-your-credentials-in-env-file&quot;&gt;Keeping Your Credentials in .env File&lt;/h4&gt;

&lt;p&gt;Create &lt;strong&gt;.env&lt;/strong&gt; file in the root of your app directory to keep your credentials (&lt;strong&gt;Client ID&lt;/strong&gt;, &lt;strong&gt;Client secret&lt;/strong&gt;, and &lt;strong&gt;Verification token&lt;/strong&gt;) you can find at your app’s Basic Information section.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;SLACK_CLIENT_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;12345XXXXX.09876XXXXX
&lt;span class=&quot;nv&quot;&gt;SLACK_CLIENT_SECRET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;535d2f9....
&lt;span class=&quot;nv&quot;&gt;SLACK_VERIFICATION_TOKEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;42P829U...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;List the .env in your &lt;strong&gt;.gitignore&lt;/strong&gt; file to keep out from public eyes when you push to git etc.&lt;/p&gt;

&lt;h4 id=&quot;using-foreman&quot;&gt;Using Foreman&lt;/h4&gt;

&lt;p&gt;To read the .env file from your app, I am using &lt;a href=&quot;[https://coderwall.com/p/qdluuq/node-js-node-foreman](https://coderwall.com/p/qdluuq/node-js-node-foreman)&quot;&gt;Node Foreman&lt;/a&gt; (instead of &lt;em&gt;dotenv&lt;/em&gt; module because it failed when deploying to Heroku).&lt;/p&gt;

&lt;p&gt;You need to install it globally on your machine:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; foreman
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At the root of your app, create a file with name of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Procfile&lt;/code&gt; and add this in the file:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When you run our node app, run with&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nf start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;authenticating-a-user&quot;&gt;Authenticating a User&lt;/h3&gt;

&lt;p&gt;Slack uses &lt;a href=&quot;https://oauth.net/2/&quot;&gt;OAuth 2.0&lt;/a&gt; for a user authentication. You can read the &lt;a href=&quot;https://api.slack.com/docs/oauth&quot;&gt;grant flow&lt;/a&gt; on the Slack doc, but you actually don’t need to implement the whole OAuth mechanism in your app when you use the &lt;a href=&quot;https://api.slack.com/docs/slack-button&quot;&gt;Slack Button&lt;/a&gt; to authenticate your users. The diagram shows below shows what you need to do, and I took this from the Slack API doc and modified:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2016/10/slack-oauth.gif&quot; alt=&quot;OAuth with Slack&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Basically, what you are going to do are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Set up a web page with the button that passes some params to Slack. &lt;em&gt;(User: After clicking the button, Slack redirects the user to authenticate)&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Your node app will receive a temporary &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;code&lt;/code&gt; from Slack via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET&lt;/code&gt;. The temp code expires in 10 min.&lt;/li&gt;
  &lt;li&gt;Exchange the authorization code for an access token using the &lt;a href=&quot;https://api.slack.com/methods/oauth.access&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oauth.access&lt;/code&gt;&lt;/a&gt; API by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST&lt;/code&gt;ing. The auth process is done when your node app receives 200 OK. &lt;/li&gt;
  &lt;li&gt;Optionally, use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;token&lt;/code&gt; to call another API to get the team name, so that you can redirect the user to the team URL, https://team-name.slack.com right after the auth is done.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When I was reading the Slack docs, I didn’t notice there was a button generator on Slack API page, so I started implementing by myself with Passport (Node.js OAuth middleware). But later I realized that  authentication with the button!&lt;/p&gt;

&lt;h4 id=&quot;setting-up-your-button&quot;&gt;Setting up Your Button&lt;/h4&gt;

&lt;p&gt;First, you need to set up a static web page. It can be a part of your node app, or separated. I made it independently from my node app, and host it on &lt;a href=&quot;http://www.girliemac.com/slack-httpstatuscats/&quot;&gt;GitHub Pages&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then go to &lt;a href=&quot;https://api.slack.com/docs/slack-button&quot;&gt;https://api.slack.com/docs/slack-button&lt;/a&gt;, scroll to &lt;strong&gt;Add the Slack button&lt;/strong&gt; to generate your button. Make sure to check &lt;strong&gt;Commands&lt;/strong&gt; for the scope.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2016/10/slack-generate-button.png&quot; alt=&quot;Slack button&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you want to do the optional API call to get the team info (step 4), you need to tweak the GET param in the auth URL.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://slack.com/oauth/authorize?scope=commands+team%3Aread&amp;amp;client_id=your_client_id&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice the scope- along with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;commands&lt;/code&gt;, add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;team:read&lt;/code&gt; (Escape the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:&lt;/code&gt; as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%3A&lt;/code&gt;). You can learn more about &lt;a href=&quot;https://api.slack.com/docs/oauth-scopes&quot;&gt;OAuth scopes on the Slack API docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://platform.slack-edge.com/img/add_to_slack.png&quot; alt=&quot;Slack button&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;issuing-token&quot;&gt;Issuing Token&lt;/h4&gt;

&lt;p&gt;Let’s use Express.js again to GET the temporary code (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;req.query.code&lt;/code&gt;) from Slack.&lt;/p&gt;

&lt;p&gt;I am using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/slack&lt;/code&gt; route. You can name whatever you want but make sure that you use the URL (Use your grok URL such as &lt;em&gt;http://71f03962.ngrok.io/slack&lt;/em&gt; during development) as a &lt;em&gt;Redirect URL&lt;/em&gt; at &lt;strong&gt;OAuth &amp;amp; Permissions&lt;/strong&gt; at https://api.slack.com/apps/YOUR_APP_ID/oauth as a part of your App configuration.&lt;/p&gt;

&lt;p&gt;Once you get the temp code, you need to POST the code along with your credentials to exchange the code for an access token.&lt;/p&gt;

&lt;p&gt;To POST, I am using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;request&lt;/code&gt;, a HTTP request client for Node.js.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;request &lt;span class=&quot;nt&quot;&gt;--save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once installed, get the temp code via GET (from a user auth) for a token via POST using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;auth.access&lt;/code&gt; API:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/slack&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;client_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SLACK_CLIENT_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;client_secret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SLACK_CLIENT_SECRET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}};&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://slack.com/api/oauth.access&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;function &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;statusCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// You are done.&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// If you want to get team info, you need to get the token here&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;access_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Auth token&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;optional-redirecting-the-user-to-the-team-url&quot;&gt;Optional: Redirecting the User to the Team URL&lt;/h4&gt;

&lt;p&gt;Once the auth is done, you are done. However, I wanted to give a slightly better UX by redirecting the user to the chat room, instead of dumping the user right there like I’ve seen in many 3rd party Slack apps.&lt;/p&gt;

&lt;p&gt;To obtain the team name (as a part of the chat room URL), use &lt;a href=&quot;https://api.slack.com/methods/team.info&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;team.info&lt;/code&gt;&lt;/a&gt; API.&lt;/p&gt;

&lt;p&gt;Add this where you got the access token in the code sample above:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://slack.com/api/team.info&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}},&lt;/span&gt;     &lt;span class=&quot;nf&quot;&gt;function &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;statusCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;team&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;team&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;team&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;.slack.com&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You need to use the access token to be able to access the API. Once successfully done, the API returns the user’s team info including the team name (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;team.domain&lt;/code&gt;), so use it to redirect the user to the team chat room URL.&lt;/p&gt;

&lt;p&gt;Ta-da! Now your user should be re-directed to a right place!&lt;/p&gt;

&lt;p&gt;For this article, I simplified all my code, but check out &lt;a href=&quot;https://github.com/girliemac/slack-httpstatuscats&quot;&gt;the entire code on GitHub&lt;/a&gt; to see all the error handlings and when to use &lt;em&gt;Verification token&lt;/em&gt; for your app.&lt;/p&gt;

&lt;h3 id=&quot;deploying-to-server&quot;&gt;Deploying to Server&lt;/h3&gt;

&lt;p&gt;Of course, you can deploy wherever you want. But if you want to deploy to Heroku like I did, I found &lt;a href=&quot;https://blog.heroku.com/how-to-deploy-your-slack-bots-to-heroku&quot;&gt;this article by Heroku&lt;/a&gt; helpful.&lt;/p&gt;

&lt;p&gt;Make sure to set up your env vars (where you set in your .env file) with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;heroku config&lt;/code&gt; command such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;heroku config:set API_KEY=123&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once you are done with the deployment, go back to your Slack App setting page to change the &lt;strong&gt;OAuth &amp;amp; Permission&lt;/strong&gt; URL from your ngrok URL to the Heroku URL.&lt;/p&gt;

&lt;p&gt;As you see, writing a Slack slash command itself is easy, but to figuring out the whole process to make the bot available to everybody was a bit pain for me. I spent most of my time reading the docs to just figuring out, and spend far less for coding.&lt;/p&gt;

&lt;p&gt;So I hope my writing was helpful for you.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2016/10/slack-worked.png&quot; alt=&quot;Hurray&quot; /&gt;&lt;/p&gt;
</content>
	</entry>
	
	<entry>
	  <title type="html"><![CDATA[Developer Experience Matters]]></title>
	  <link rel="alternate" type="text/html" href="https://laoazhang.cn/blog/2016/08/16/developer-experience-matters/" />
	  <id>https://laoazhang.cn/blog/2016/08/16/developer-experience-matters</id>
	  <updated>2016-08-16T00:00:00-07:00</updated>
	  <author>
	    <name>laoazhang</name>
	    <uri>https://laoazhang.cn</uri>
	  </author>
	  <content type="html">&lt;p&gt;&lt;em&gt;I am writing this article based on the short talk I gave at &lt;a href=&quot;http://www.devrelsummit.com/&quot;&gt;DevRel Summit&lt;/a&gt; in Seattle, and it is aimed for my fellow developer advocates, platform engineers, product managers, and CTOs, who work for companies that provide developer platforms, APIs etc. also anybody who advocate their own software / libraries / frameworks&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2016/08/dx-jamie-comic.jpg&quot; alt=&quot;Developer Experience Matters&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s say, you are working for a company that provides public APIs, or you are an open-source JavaScript library author, who want to attract developers out there to use your products.&lt;/p&gt;

&lt;p&gt;When your potential developers, who are in search for a solution for a new project- this can be a large-scale commercial project, or it could be to compete at a hackathon, see your shiny website but has very poorly-designed developer portal (or your open-source project on GitHub may have some stars, but with no README), how does the developer feel? Do they still want to try it out anyway, or keep searching something else and end up choosing your competitor?&lt;/p&gt;

&lt;p&gt;I have been working as a developer evangelist, or related positions in Developer Relations for about six years for three (technically four, including acquisition) different companies, to advocate both proprietary and open technologies. From the experiences, what I’ve seen is that developers (including myself) tend to shy away when the API (or platform, services, etc.) is poorly designed, lacks good docs, Get Started guide, or code samples.&lt;/p&gt;

&lt;p&gt;This &lt;strong&gt;Developer Experience&lt;/strong&gt; is one of the biggest key factors for developers to decide if they use certain technologies to use.&lt;/p&gt;

&lt;h2 id=&quot;user-experience-and-developer-experience&quot;&gt;User Experience and Developer Experience&lt;/h2&gt;

&lt;p&gt;Before becoming a developer evangelist, I was working as a developer in Human Interface team for &lt;strong&gt;Palm webOS&lt;/strong&gt; mobile platform. Although we didn’t successfully dominate the market, what the team has designed has been inherited to present-era iOS and Android. For example, non-intrusive visual notification system, card views, universal search bar, etc.&lt;/p&gt;

&lt;p&gt;My then-teammates has influenced me so much, and it has affected my career and the way of thinking. Since then, I care &lt;strong&gt;usability&lt;/strong&gt; and &lt;strong&gt;user-experiences (UX)&lt;/strong&gt; for everything - not only software and hardware interface designs, but for coding styles, APIs, and documentations, because I believe UX is also applied to developers, when your &lt;em&gt;users&lt;/em&gt; are developers.&lt;/p&gt;

&lt;p&gt;According to &lt;a href=&quot;https://usability.org&quot;&gt;usabilty.gov&lt;/a&gt;,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;User-Experience (UX) focuses on having a deep understanding of users, what they need, what they value, their abilities, and also their limitations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and I think the statement is still true, when you swap out the word, &lt;em&gt;user&lt;/em&gt; to &lt;em&gt;developer&lt;/em&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Developer-Experience (DX) focuses on having a deep understanding of developers, what they need, what they value, their abilities, and also their limitations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yes, I am suggesting Developer Experience &lt;em&gt;is&lt;/em&gt; a type of User Experience!&lt;/p&gt;

&lt;h3 id=&quot;bad-developer-experience-and-frustrations&quot;&gt;Bad Developer Experience and Frustrations&lt;/h3&gt;

&lt;p&gt;This is a good example of how not to design- At a gas station, you’ve got a gas pump looks like this, how do you react?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2016/08/gas-pump.jpg&quot; alt=&quot;Local Gas Pump by Jared Spool&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Photo credit: https://flic.kr/p/5ckBZq by Jared Spool. CC-BY-SA)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Typically, when a user face such bad user experience, the reactions would be:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Get confused&lt;/li&gt;
  &lt;li&gt;Make a good guess and fail&lt;/li&gt;
  &lt;li&gt;Frustrated&lt;/li&gt;
  &lt;li&gt;Repeat 2 - 3&lt;/li&gt;
  &lt;li&gt;Totally pissed off&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;How about if you provide very enigmatic API, sans proper documentations or tutorial, and a developer is trying to figure out how to use the API- How does the developer react?&lt;/p&gt;

&lt;p&gt;I think the reactions would be the same as above! The difference is that if you are at a gas station, you are more likely to try again or ask somebody to get your car filled up, while developers are more likely to google around (or ask Twitter followers) then ditch your service for use your competitor’s over the bad developer experiences.&lt;/p&gt;

&lt;h2 id=&quot;developer-centric-products&quot;&gt;Developer-Centric Products&lt;/h2&gt;

&lt;p&gt;So, what kinds of products have users who are developers? I tried to come up with a list of “products” that we need to care about developer experience-&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Platforms&lt;/li&gt;
  &lt;li&gt;SDKs &amp;amp; tools&lt;/li&gt;
  &lt;li&gt;APIs&lt;/li&gt;
  &lt;li&gt;Developer website UI/UX, and contents&lt;/li&gt;
  &lt;li&gt;Docs, tutorials, and “Get started” guides&lt;/li&gt;
  &lt;li&gt;Samples on GitHub - code &amp;amp; README&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While developer evangelists have works including developer trainings including workshops and conferences, and events like hackathons, here, I only try to define products, and excluding all the direct actions and interaction with developers.&lt;/p&gt;

&lt;h3 id=&quot;api-designing&quot;&gt;API Designing&lt;/h3&gt;

&lt;p&gt;API providers do also need to provide SDKs for common / high-demand languages, and sometimes for frameworks. You are losing developers when either SDK or API, as user-interface for developers, are missing.&lt;/p&gt;

&lt;p&gt;Also, good API should be intuitive and easy to use, and bad API includes bad naming conventions, bad error messages, inconsistencies, etc. &lt;a href=&quot;https://www.youtube.com/watch?v=aAb7hSCtvGw&quot;&gt;In his talk, Joshua Bloch stated&lt;/a&gt; that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;API can be among a company’s greatest assets&lt;/li&gt;
  &lt;li&gt;Can also be among company’s greatest liabilities&lt;/li&gt;
  &lt;li&gt;Public APIs are forever&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;He also tells us to &lt;em&gt;document religiously&lt;/em&gt;- good API must have good design and documentation. I am not going to summarize all his talks here, so I recommend you should watch the &lt;a href=&quot;(https://www.youtube.com/watch?v=aAb7hSCtvGw)&quot;&gt;video&lt;/a&gt; by yourself.&lt;/p&gt;

&lt;h3 id=&quot;api-documentations&quot;&gt;API Documentations&lt;/h3&gt;

&lt;p&gt;When we are talking about API docs, actually we need to provide more than just API references. Developers expect:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Reference documentations&lt;/li&gt;
  &lt;li&gt;Getting Started guide&lt;/li&gt;
  &lt;li&gt;Tutorials&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While API reference explains every call in the API and parameter, values, etc., other types of docs often provides step-by-step instructions, and copy-and-pasteable code samples, including &lt;em&gt;Hello World&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A rule of thumb of writing these docs is keep everything simple in plain English. Complex docs don’t impress your fellow engineers, but rather repel them. The basic tutorial should be short and simple too, but if you want to explore your creativity like I do, you should provide supplemental tutorials beyond your API docs- Blog, Demo, Showcase, etc.&lt;/p&gt;

&lt;h3 id=&quot;creative-contents-for-developers&quot;&gt;Creative Contents for Developers&lt;/h3&gt;

&lt;p&gt;My expertise is providing interesting use cases with code samples and demos. (You can browse my articles on this blog and many other sites!) What I knew and what I’ve learned from my own experiences are that developer experience is good when a doc has these:&lt;/p&gt;

&lt;h4 id=&quot;meaningful-diagrams&quot;&gt;Meaningful Diagrams&lt;/h4&gt;

&lt;p&gt;A picture is worth a thousand words - a simple diagram can explain complex idea far better. When I was writing about push notifications gateway for GCM and APNs, I decided to create a diagram to show how it works, rather than writing the whole explanations, and it turns out my readers (and coworkers) really did understand what the device registration meant, and how it works with push notification.&lt;/p&gt;

&lt;p&gt;This is an actual screenshot of the blog I wrote for my previous employer, PubNub:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2016/08/screenshot-gcm.png&quot; alt=&quot;screenshot of my blog&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;screen-captures&quot;&gt;Screen Captures&lt;/h4&gt;

&lt;p&gt;A step-by-step instruction in a bullet list helps your developers for sure, but I found they love when the steps are described with actual screenshots. And devs love even more when they are in a single gif animation, which I think is a great example of the &lt;em&gt;TL;DR&lt;/em&gt; principal!&lt;/p&gt;

&lt;p&gt;This example below is what I created to show hoe to use Chrome DevTools Device Mode. I created for &lt;a href=&quot;http://www.girliemac.com/blog/2014/07/28/devicemode/&quot;&gt;my own blog&lt;/a&gt;, and, later adopted by Google’s Chrome team, and stayed on the official doc for a while.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2014/07/devtools-device-mode-2.gif&quot; alt=&quot;screenshot of devtools&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;video-tutorials&quot;&gt;Video Tutorials&lt;/h4&gt;

&lt;p&gt;Especially, when you are targeting the first-timers, I found video tutorials are quite effective, because N00bs may have no idea where to get started. I don’t blame on them because there is always a first time for everybody.&lt;/p&gt;

&lt;p&gt;I created &lt;a href=&quot;https://www.youtube.com/watch?v=sC72DCxQrcU&quot;&gt;this Johnny-Five video&lt;/a&gt; because I was asked by enough numbers of people where to get started with hardware. The tutorial is tageting Node.js engineers who has no prior experiences with hardware engineering. I show electrical parts and explain what they are and how to wire. A cool thing is that the tutorial was introduced on &lt;a href=&quot;https://arduino.cc&quot;&gt;Arduino&lt;/a&gt; official blog, and got a lot of good feedbacks on social media.&lt;/p&gt;

&lt;h4 id=&quot;more-improvement-for-better-dx&quot;&gt;More Improvement for Better DX&lt;/h4&gt;

&lt;p&gt;There are more things I try to keep in mind for good DX-&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Publish date should be included, especially because a dev year is like a dog year, where things get outdated pretty quick.&lt;/li&gt;
  &lt;li&gt;No pushy marketing- obnoxious “Sign up now!!!” buttons and popups annoy devs away.&lt;/li&gt;
  &lt;li&gt;Docs and tuts need to have good browsing experiences just like web pages. Always link to references and related pages.&lt;/li&gt;
  &lt;li&gt;Don’t PDF everything. Docs and tuts for developers are not white papers.&lt;/li&gt;
  &lt;li&gt;Provide a place for feedbacks- my last company’s marketing peeps refused to add a comment section on blog, or set up a forum, so in the results, I got comments and questions on random social media everywhere, and my email addresses (work, personal, and wrongly-guessed work email address that eventually forwarded to me.)&lt;/li&gt;
  &lt;li&gt;Cut the BS- if your API is not ready or buggy, state so honestly.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;developer-friendliness&quot;&gt;Developer-Friendliness&lt;/h2&gt;

&lt;p&gt;I stumbled upon this tweet about user-friendliness on the other day-&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2016/08/kaz-tweet.png&quot; alt=&quot;screenshot of devtools&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is interesting to see how the two companies describe the same errors in such different languages.&lt;/p&gt;

&lt;p&gt;I was curious how these companies differ in Developer Experience, so I took a look at their API docs, and the results were not surprising. I am pretty sure the product peeps (who worked on the messages) at JIRA and Slack don’t work for the API docs, however the the friendliness of these docs reflect exactly like-&lt;/p&gt;

&lt;p&gt;These are documentations for their OAuth authentication-&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.atlassian.com/jiradev/jira-apis/jira-rest-apis/jira-rest-api-tutorials/jira-rest-api-example-oauth-authentication&quot;&gt;JIRA&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2016/08/jira-doc.png&quot; alt=&quot;JIRA OAuth Doc&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://api.slack.com/docs/oauth&quot;&gt;Slack&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2016/08/slack-doc.png&quot; alt=&quot;Slack OAuth Doc&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is pretty clear that Slack docs is far more developer-friendly, not because of the cute robot, but the non-authoritative tone, and the way they introduce OAuth (what it is, and how it works) and the diagram, while JIRA doc doesn’t even bother explaining what OAuth is, as if newbie developers are not welcomed.&lt;/p&gt;

&lt;p&gt;I wonder if it is more “appropriate” for enterprise companies to be unfriednly to both user and developer…&lt;/p&gt;

&lt;h2 id=&quot;knowing-your-developers&quot;&gt;Knowing Your Developers&lt;/h2&gt;

&lt;p&gt;If you interact directly with developers on chat or forum, or work with community managers who do, you probably already have good idea about your developer community.&lt;/p&gt;

&lt;p&gt;Another method I adopted from Human Interface team was defining &lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Persona_(user_experience)&quot;&gt;persona&lt;/a&gt;&lt;/strong&gt; during product development process. In my case, of course it is developer personas. I gather information from registrations, surveys, Stackoverflow, and support team (e.g. What language/SDK a developer use? What kinds of apps they develop?) Also, I get info from sales reps and business development team about actual customer (e.g. size of a client’s company, industry, location, etc.)&lt;/p&gt;

&lt;p&gt;I sometimes conduct brainstormings. This is quite effective to generate creative ideas and solutions, as well as team building. I combine the persona and brainstorming to figure our what our developers want.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2016/08/dx-brainstorm.jpg&quot; alt=&quot;brainstorming&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This photo was taken right after the first brainstorming session was done at my previous work. After the session, we sorted the ideas in category and feasibility.&lt;/p&gt;

&lt;p&gt;Sure, this does not look like your typical Developer Relations meeting, but I have successfully delivered a lot of good use-cases and tutorials and articles around them. After social media has picked up, the awareness of the virtually unknown company and the products went up.&lt;/p&gt;

&lt;h2 id=&quot;diversity-and-inclusiveness&quot;&gt;Diversity and Inclusiveness&lt;/h2&gt;

&lt;p&gt;The majority of developers may be male and understand English, but if you are targeting only the majority, you are still missing out large numbers developers out there.&lt;/p&gt;

&lt;p&gt;Inclusivity typically means not to exclude any groups of gender (expression), race, ethnicity, disability, sexual orientation, etc. I am not going to talk too much about the importance of diversity in a workplace in this article, however, I strongly believe when you work at a diverse team, you can definitely reach out more developers, especially because people in general tend to trust somebody who they feel related to. In fact, many of my “fans” are minorities- women, immigrants, speaking English as a second language, etc. (It is very flattering when people tell/tweet/email me they are fan of my works!)&lt;/p&gt;

&lt;p&gt;Especially when somebody in your team speak/write something other than English, it would be a huge advantage. I do speak and write Japanese fluently, and in numerous occasions, I have helped sales and other teams when the companies have Japanese clients. I have written blog posts, and spoken at conferences in Tokyo as well. My conference videos and slides on &lt;a href=&quot;https://slideshare.net&quot;&gt;Slideshare&lt;/a&gt; have reached out far larger audiences. I can clearly tell you that it’s not easy for you to get into Asian markets without somebody who knows the languages and cultures well!&lt;/p&gt;

&lt;p&gt;Even if your team has no other multi-lingual people or simple has no time to translate, when your organization has successfully support international developers, the community helps you.&lt;/p&gt;

&lt;p&gt;For example, &lt;a href=&quot;https://dev.opera.com&quot;&gt;Dev.Opera&lt;/a&gt; publishes their tech blog under Creative Commons, and open-sourced the contents on &lt;a href=&quot;https://github.com/operasoftware/devopera&quot;&gt;GitHub&lt;/a&gt;, where their community can contribute. I have written &lt;a href=&quot;https://dev.opera.com/articles/web-notifications-pubnub/&quot;&gt;an article in English&lt;/a&gt; for Dev.Opera, and the community member has translated it &lt;a href=&quot;https://dev.opera.com/articles/ru/web-notifications-pubnub/&quot;&gt;in Russian&lt;/a&gt;! How awesome is it!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2016/08/devopera-russian.png&quot; alt=&quot;translated in Russian&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is not easy to acquire fans worldwide, but having a diverse team makes it far easier.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Developer Experiences &lt;em&gt;really&lt;/em&gt; matters!&lt;/p&gt;

&lt;p&gt;Here’s the slide deck from &lt;a href=&quot;http://www.devrelsummit.com/&quot;&gt;DevRel Summit&lt;/a&gt; :&lt;/p&gt;

&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/CdP2J9ci1BP5Gq&quot; width=&quot;595&quot; height=&quot;485&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen=&quot;&quot;&gt; &lt;/iframe&gt;

&lt;h2 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h2&gt;

&lt;p&gt;Despite my tireless efforts and successful outcomes, my principles of developer evangelism did not align with my former employer’s marketing department that controls the team. When somebody doesn’t care about developers, you have no job there. Well, it has been fun leading the team for a while!&lt;/p&gt;

&lt;p&gt;I am joining a company who truly embraces developer experience, so you will hear from me about my new gig pretty soon!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
	  <title type="html"><![CDATA[Arduino with Johnny-Five 101 - Video Tutorial]]></title>
	  <link rel="alternate" type="text/html" href="https://laoazhang.cn/blog/2016/07/30/arduino-johnny-five-101/" />
	  <id>https://laoazhang.cn/blog/2016/07/30/arduino-johnny-five-101</id>
	  <updated>2016-07-30T00:00:00-07:00</updated>
	  <author>
	    <name>laoazhang</name>
	    <uri>https://laoazhang.cn</uri>
	  </author>
	  <content type="html">&lt;p&gt;Since I started talking about hardware hacking with JavaScript at events and conferences, I have been constantly asked by fellow JavaScript engineers where to get started.&lt;/p&gt;

&lt;p&gt;It is easy once you know how, but starting something new is always difficult, or more like, you won’t even want to try unless somebody shows you how. So I decided to create a video series to walk through.&lt;/p&gt;

&lt;p&gt;Especially because I already have written some tutorials and published as my day job, including &lt;a href=&quot;http://code.tutsplus.com/tutorials/how-to-create-a-smart-device-with-arduino-and-nodejs-using-pubnub--cms-25508&quot;&gt;“How to Create a Smart Device With Arduino and Node.js Using PubNub”&lt;/a&gt;, I wanted to film the video version. Although there was some conflicts with marketing team at work (I will talk about it sometimes…), I secretly did this side project with help pf my colleague, Eric, and made two videos.&lt;/p&gt;

&lt;p&gt;Eventually, it was picked up by &lt;a href=&quot;https://arduino.cc&quot;&gt;Arduino.cc &lt;/a&gt; blog, so we have proven that creating contents that target indie devs aren’t bad idea at all. It is rather sad when people think supporting “hobbyists” is wasting company money and resources.&lt;/p&gt;

&lt;p&gt;Anyway, this is Part Uno of my video tutorial, where you can learn how to use Johnny-Five with Arduino, also learn about the basics of wiring and how to blink an LED in 10 minutes!&lt;/p&gt;

&lt;iframe src=&quot;https://player.vimeo.com/video/170236455&quot; width=&quot;640&quot; height=&quot;360&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</content>
	</entry>
	
	<entry>
	  <title type="html"><![CDATA[Upgrading KittyCam with Raspberry Pi 3]]></title>
	  <link rel="alternate" type="text/html" href="https://laoazhang.cn/blog/2016/06/13/kittycam-update-with-raspberrypi3/" />
	  <id>https://laoazhang.cn/blog/2016/06/13/kittycam-update-with-raspberrypi3</id>
	  <updated>2016-06-13T00:00:00-07:00</updated>
	  <author>
	    <name>laoazhang</name>
	    <uri>https://laoazhang.cn</uri>
	  </author>
	  <content type="html">&lt;p&gt;I was excited when &lt;strong&gt;Raspberry Pi 3&lt;/strong&gt; came out earlier this year. According to &lt;a href=&quot;https://www.raspberrypi.org/products/raspberry-pi-3-model-b/&quot;&gt;raspberrypi.org&lt;/a&gt;, this 3rd generation Pi has faster CPU, WiFi, and Bluetooth 41. and BLE, additional to the previous model.&lt;/p&gt;

&lt;p&gt;So I decided to upgrade &lt;a href=&quot;http://www.girliemac.com/blog/2015/12/25/kittycam-raspberrypi-camera-cat-face-recog-nodejs/&quot;&gt;KittyCam&lt;/a&gt;, a cat camera app built with my Raspberry Pi + Node.js project, which and I blogged about a while ago.&lt;/p&gt;

&lt;p&gt;At that time, I was using the older Node v0.12.x (pre-IO.js, which I almost forgot about it happened after merged back with Node.js), so I decided to upgrade everything.&lt;/p&gt;

&lt;h2 id=&quot;install-the-latest-raspbian&quot;&gt;Install the Latest Raspbian&lt;/h2&gt;

&lt;p&gt;Since I got a brand-new Pi3, I install everything fresh, so instead of swapping the SD card from the old Pi, I installed the latest Raspbian build.&lt;/p&gt;

&lt;p&gt;Forst, I download the latest &lt;strong&gt;Raspbian Jesse&lt;/strong&gt; from &lt;a href=&quot;https://www.raspberrypi.org/downloads/raspbian/&quot;&gt;raspberrypi.org&lt;/a&gt; to my Mac, then install it in a micro SD card using these &lt;a href=&quot;https://www.raspberrypi.org/documentation/installation/installing-images/README.md&quot;&gt;instructions&lt;/a&gt; using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dd&lt;/code&gt; tool.&lt;/p&gt;

&lt;p&gt;In case you are also a MacBook Air user and don’t know, your MacBook has a SD card slot on the right hand side. But you will need an adapter.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2016/06/sdcard.jpg&quot; alt=&quot;SD card adapter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The image is from &lt;a href=&quot;(https://learn.sparkfun.com/tutorials/sd-cards-and-writing-images)&quot;&gt;“SD Cards and Writing Images”&lt;/a&gt; by Sparkfun (&lt;a href=&quot;http://creativecommons.org/licenses/by-nc-sa/3.0/&quot;&gt;CC BY-NC-SA 3.0&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&quot;installing-node-4&quot;&gt;Installing Node 4&lt;/h2&gt;

&lt;p&gt;Last time with Node 0.12, I used the 3rd party &lt;a href=&quot;http://node-arm.herokuapp.com/&quot;&gt;node-arm&lt;/a&gt; to install it, but now ARM version is officially supported on &lt;a href=&quot;https://nodejs.org/&quot;&gt;nodejs.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So you can just open up a browser in Raspbian, and download from &lt;a href=&quot;https://nodejs.org/en/download/&quot;&gt;nodejs.org Download page&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;Scroll the page down to &lt;strong&gt;Additional Platforms&lt;/strong&gt; and choose ARMv7 (Note: I think ARMv8 works too, but I installed v7).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2016/06/raspi3-node4-armv7.png&quot; alt=&quot;node download&quot; /&gt;&lt;/p&gt;

&lt;p&gt;or download and install on terminal as I did:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget https://nodejs.org/dist/v4.4.5/node-v4.4.5-linux-armv7l.tar.xz
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-xvf&lt;/span&gt; node-v4.4.5-linux-armv7l.tar.xz
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;node-v4.4.5-linux-armv7l
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo cp&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; /usr/local/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Check if Node is successfully installed by checking its version:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;node &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you wish, upgrade &lt;strong&gt;npm&lt;/strong&gt; to v3 too.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; npm3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;installing-updated-dependencies-for-kittycam&quot;&gt;Installing Updated Dependencies for KittyCam&lt;/h2&gt;

&lt;p&gt;Create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KittyCam&lt;/code&gt; directory and copy everything except &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package.json&lt;/code&gt;from &lt;a href=&quot;https://github.com/girliemac/RPi-KittyCam&quot;&gt;KittyCam repo&lt;/a&gt;. But also keep the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node_modules/kittydar&lt;/code&gt; because installing kittydar using npm, and use it as is will fail, when you install Node-Canvas. (or tweak kittydar’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package.json&lt;/code&gt; manually!)&lt;/p&gt;

&lt;h3 id=&quot;installing-cairo&quot;&gt;Installing Cairo&lt;/h3&gt;

&lt;p&gt;Get &lt;strong&gt;Cairo&lt;/strong&gt; on your Raspbian bore installing Node-Canvas:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;libcairo2-dev libjpeg8-dev libpango1.0-dev libgif-dev build-essential g++
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once set up with Cairo, in KittyCam dir,&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;canvas
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;installing-johnny-five&quot;&gt;Installing Johnny-Five&lt;/h3&gt;

&lt;p&gt;Also, since the last time I created KittyCam, &lt;a href=&quot;http://johnny-five.io/&quot;&gt;Johnny-Five&lt;/a&gt; and the IO-plugin for Raspberry Pi, &lt;a href=&quot;https://github.com/bryan-m-hughes/raspi-io&quot;&gt;Raspi-io&lt;/a&gt; have been upgraded a lot too. So just install the latest manually:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;johnny-five &lt;span class=&quot;nt&quot;&gt;--save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;raspi-io &lt;span class=&quot;nt&quot;&gt;--save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;installing-all-other-node-modules&quot;&gt;Installing All other Node Modules&lt;/h3&gt;

&lt;p&gt;and all other node modules used for KittyCam. In the app, I am also using Cloudinary and PubNub. You can install both with npm too.&lt;/p&gt;

&lt;h2 id=&quot;hardware-wiring&quot;&gt;Hardware Wiring&lt;/h2&gt;

&lt;p&gt;I have not updated any hardware besides Pi.&lt;/p&gt;

&lt;p&gt;When you hook up with a camera, make sure to enable the camera module from the &lt;strong&gt;Pi Software Config Tool&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;raspi-config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, everything should work with Raspberry Pi 3!&lt;/p&gt;

&lt;p&gt;I had chance to test it out while I was taking care of my friends’ cats!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2016/06/qateam.png&quot; alt=&quot;QA Team&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I have given the talk about KittyCam in a few conferences and meetups so far, such as NodePDX in Portland and ForwardJS in San Francisco. My slide deck is available on &lt;a href=&quot;http://www.slideshare.net/tomomi/nodepdx-from-software-to-hardware-how-do-i-track-my-cat-with-javascript&quot;&gt;SlideShare&lt;/a&gt;!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
	  <title type="html"><![CDATA[KittyCam - Building a Raspberry Pi Camera with Cat Face Detection in Node.js]]></title>
	  <link rel="alternate" type="text/html" href="https://laoazhang.cn/blog/2015/12/25/kittycam-raspberrypi-camera-cat-face-recog-nodejs/" />
	  <id>https://laoazhang.cn/blog/2015/12/25/kittycam-raspberrypi-camera-cat-face-recog-nodejs</id>
	  <updated>2015-12-25T00:00:00-08:00</updated>
	  <author>
	    <name>laoazhang</name>
	    <uri>https://laoazhang.cn</uri>
	  </author>
	  <content type="html">&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/UuKlrNQWs5wFciRqI8qiZKTVoh4XrTBa40LD5mUa5MIn=w1346-h757-no&quot; alt=&quot;RPi KittyCam&quot; title=&quot;Rapsberry Pi KittyCam&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ho, ho, ho! This is an overdue blog post for &lt;a href=&quot;https://github.com/girliemac/RPi-KittyCam&quot;&gt;the project&lt;/a&gt; I’ve worked on during summer!&lt;/p&gt;

&lt;p&gt;Last August, I created this Raspberry Pi app using a camera and PIR motion sensor, written in Node.js with helps with &lt;strong&gt;Johnny-Five&lt;/strong&gt; and &lt;strong&gt;KittyDar&lt;/strong&gt;. As I promised on the README file of the GitHub repo, I am finally writing the detailed instruction of how I built hardware and wrote the app.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2015/12/youtube-kittycam-thumb.jpg&quot; alt=&quot;KittyCam on YouTube&quot; title=&quot;YouTube&quot; /&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=wqewhjhjaHY&quot;&gt;Watch the demo on YouTube :-)&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-kittycam-works&quot;&gt;How KittyCam Works&lt;/h2&gt;

&lt;p&gt;The software is written in Node.js, simply because JavaScript is the language I am most comfortable with, also it is fun!&lt;/p&gt;

&lt;p&gt;This is the basic flow:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Detect motion (Use Johnny-Five IR.Motion obj)&lt;/li&gt;
  &lt;li&gt;Take photos (Raspistill, command line tool)&lt;/li&gt;
  &lt;li&gt;Cat facial detection (KittyDar)&lt;/li&gt;
  &lt;li&gt;Store the photos in cloud storage (Cloudinary)&lt;/li&gt;
  &lt;li&gt;Publish the data (URL) to PubNub for realtime streaming&lt;/li&gt;
  &lt;li&gt;Stream on web (subscribe the data from PubNub)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2015/12/kittyCam-app.png&quot; alt=&quot;KittyCam flow&quot; title=&quot;KittyCam flow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The hardware-software communication is done with &lt;a href=&quot;http://johnny-five.io/&quot;&gt;Johnny-Five&lt;/a&gt;, open-source JavaScript robotics programming framework. I am using it to talk with a PIR sensor. When the sensor detect my cat (or any moving objects) nearby Raspberry Pi, it triggers the camera.&lt;/p&gt;

&lt;p&gt;Photos are taken using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;raspistill&lt;/code&gt; command line. One cool thing about Node.js is that you can execute commands by spawning child processes.&lt;/p&gt;

&lt;p&gt;Once a photo is taken, I am using another child process to detect if any cats are on the photo, using &lt;a href=&quot;https://github.com/harthur/kittydar&quot;&gt;KittyDar&lt;/a&gt;, an open source face detection for cats, written by Heather Arthur.&lt;/p&gt;

&lt;p&gt;Additionally, I am sending the photos (only photos with cats) to a cloud storage, and at the same time, I stream the photo to web browser using &lt;a href=&quot;http://pubnub.com&quot;&gt;PubNub&lt;/a&gt;, because I work for the company!&lt;/p&gt;

&lt;p&gt;Now, let’s build your own!&lt;/p&gt;

&lt;h2 id=&quot;building-the-circuit-with-raspberry-pi-2&quot;&gt;Building the Circuit with Raspberry Pi 2&lt;/h2&gt;

&lt;h3 id=&quot;what-you-need&quot;&gt;What you need&lt;/h3&gt;

&lt;p&gt;First, you need to get some hardware along with Raspberry Pi 2. I don’t recommend any older Raspberry Pi, as their memory is too low to run some code.&lt;/p&gt;

&lt;p&gt;The Pi needs to be pre-installed with &lt;strong&gt;Raspbian OS&lt;/strong&gt;. And if you are starting from a scratch, with Raspberry Pi fresh out of box, you can take a look at &lt;a href=&quot;https://github.com/pubnub/workshop-raspberrypi&quot;&gt;&lt;strong&gt;Setting up Raspberry Pi&lt;/strong&gt; section of the instruction I wrote for my workshop&lt;/a&gt; I give at conferences sometimes.&lt;/p&gt;

&lt;p&gt;But if you are a newbie, I recommend to buy your first Pi from &lt;a href=&quot;http://www.amazon.com/gp/product/B008XVAVAW/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=B008XVAVAW&amp;amp;linkCode=as2&amp;amp;tag=girliemac-20&amp;amp;linkId=DU2AO5J5GTPAQMPO&quot;&gt;CanaKit&lt;/a&gt;, so you don’t need to set it up all by yourself.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2015/12/what-you-need-raspberry-pi.jpg&quot; alt=&quot;What you need and how to assemble&quot; title=&quot;The stuff you need and how to assemble&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Raspberry Pi 2 (with WiFi adapter) (&lt;a href=&quot;http://amzn.to/1rk3VZY&quot;&gt;buy&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;5MP Camera Board Module (&lt;a href=&quot;http://amzn.to/1UKaEXl&quot;&gt;buy&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Pyroelectric Infrared (PIR) motion sensor (&lt;a href=&quot;http://amzn.to/1ZJ3Nir&quot;&gt;buy&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;3 Female/Female wires (&lt;a href=&quot;http://amzn.to/1U8ajAZ&quot;&gt;buy&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Optional: LEGO compatible SmartiPi w/ camera case (&lt;a href=&quot;http://amzn.to/28vkhAR&quot;&gt;buy&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;assembling-hardware&quot;&gt;Assembling Hardware&lt;/h3&gt;

&lt;p&gt;This doesn’t require much of wiring. You can connect a camera and a PIR sensor directory to a Pi without any breadboards or soldering, as you see in the photo above at the previous section, or this Fritzing diagram below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2015/12/pi-pir-camera_bb.png&quot; alt=&quot;RPi KittyCam&quot; title=&quot;Assemble PIR and camera&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;camera-to-pi&quot;&gt;Camera to Pi&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Connect the camera module to the CSI port. See &lt;a href=&quot;https://www.raspberrypi.org/help/camera-module-setup/&quot;&gt;the video instruction of how to set up th camera module on RaspberryPi.org&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;pir-sensor-to-pi&quot;&gt;PIR Sensor to Pi&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;1 red wire: PIR-VCC to Pi’s &lt;strong&gt;5V&lt;/strong&gt; pin&lt;/li&gt;
  &lt;li&gt;1 black wire: PIR-GND to Pi’s ground (&lt;strong&gt;GND&lt;/strong&gt; pin)&lt;/li&gt;
  &lt;li&gt;1 whatever color wire (brown in the photo): PIR-OUT to Pi’s Pin &lt;strong&gt;7&lt;/strong&gt; (GPIO 4)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The photo below is my Pi enclosed in SmartiPi case:
&lt;img src=&quot;https://lh3.googleusercontent.com/o-XG7ZijXM_UXQHuYrDxC6mlTofyUzUCmHqNmr6oRYZk=w1346-h757-no&quot; alt=&quot;RPi KittyCam&quot; title=&quot;Rapsberry Pi KittyCam&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;working-remotely-from-mac&quot;&gt;Working Remotely from Mac&lt;/h2&gt;

&lt;p&gt;You can plug in a monitor, keyboard, mouse, etc to your Pi and work directly on Raspbian GUI, or work from you Mac, like I usually do. This is how I work remotely on Mac:&lt;/p&gt;

&lt;h3 id=&quot;ssh-ing-into-raspberry-pi&quot;&gt;SSH-ing into Raspberry Pi&lt;/h3&gt;

&lt;p&gt;First, make sure your Pi and computer are on the same WiFi network.&lt;/p&gt;

&lt;p&gt;If you are directly connecting your Pi to a monitor and a keyboard, open a terminal, and find the IP address:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pi@raspberrypi ~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;hostname&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or use some IP scanner app on Mac, like &lt;a href=&quot;http://angryip.org/download/#mac&quot;&gt;Angry IP Scanner&lt;/a&gt; to scan all connected devices.&lt;/p&gt;

&lt;p&gt;Once you find the IP address, open a terminal app on Mac, and ssh into the address. I am using the default username for Pi, “pi”.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tomomi@Mac ~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh pi@10.0.1.13
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then type the password. Default is “raspberry”.&lt;/p&gt;

&lt;p&gt;Once connected to your Pi, you can create files, code, and execute from the terminal. Raspbian is a Debian based, so you can use usual linux commands.&lt;/p&gt;

&lt;h3 id=&quot;coding-on-your-fave-ide-on-mac&quot;&gt;Coding on Your Fave IDE on Mac&lt;/h3&gt;

&lt;p&gt;I usually use &lt;strong&gt;Sublime Text&lt;/strong&gt; to code, so I prefer doing so for coding on Pi as well.
Here’s what I do:&lt;/p&gt;

&lt;p&gt;First, download and install &lt;a href=&quot;https://cyberduck.io&quot;&gt;Cyberduck&lt;/a&gt; on Mac.&lt;/p&gt;

&lt;p&gt;Then connect your Pi via SSH, using its IP address (See the screenshot below)
&lt;img src=&quot;/assets/images/articles/2015/12/cyberduck-connect-rpi.png&quot; alt=&quot;Cyberduck to RPi&quot; title=&quot;Connect Rapsberry Pi via Cyberduck&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When you edit a file, open the file with “Edit”.
&lt;img src=&quot;/assets/images/articles/2015/12/cyberduck-connect-rpi-edit.png&quot; alt=&quot;Cyberduck to RPi&quot; title=&quot;Connect Rapsberry Pi via Cyberduck&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In my case, it automatically select Sublime to edit JavaScript files.&lt;/p&gt;

&lt;h2 id=&quot;software-setup&quot;&gt;Software Setup&lt;/h2&gt;

&lt;h3 id=&quot;1-install-nodejs-in-your-raspberry-pi&quot;&gt;1. Install node.js in your Raspberry Pi&lt;/h3&gt;

&lt;p&gt;Make sure your Pi is up-to-date!&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;then&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;download-and-install&quot;&gt;Download and Install&lt;/h4&gt;

&lt;p&gt;Let’s download node from &lt;a href=&quot;http://node-arm.herokuapp.com/&quot;&gt;node-arm&lt;/a&gt;, which is probably the easiest way:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget http://node-arm.herokuapp.com/node_archive_armhf.deb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and install the package:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;dpkg &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; node_archive_armhf.deb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Check if node is successfully installed.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;node &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As of Dec. 2015, the archive should install Node v0.12.6. This is the version I used and works fine for sure.&lt;/p&gt;

&lt;h3 id=&quot;2-enable-camera-access&quot;&gt;2. Enable Camera Access&lt;/h3&gt;

&lt;p&gt;To be able to use a hardware camera module with your Pi, you need to enable the software first.&lt;/p&gt;

&lt;p&gt;Go to &lt;strong&gt;Pi Software Config Tool&lt;/strong&gt; menu from a terminal:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;raspi-config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should see the menu like this. Use arrow keys to select &lt;strong&gt;Enable Camera&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2015/12/config-enable-pi-camera.png&quot; alt=&quot;Pi Software Config Tool&quot; title=&quot;Pi Software Config Tool&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hit Return, then at the next screen, select &lt;strong&gt;Enable&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Test if your camera is working by try typing this command on terminal:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;raspistill &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; photo.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;installing-dependencies&quot;&gt;Installing Dependencies&lt;/h2&gt;

&lt;p&gt;If you wish to run the code from my GitHub repo, clone &lt;a href=&quot;https://github.com/girliemac/RPi-KittyCam&quot;&gt;RPi-KittyCam repo on GitHub&lt;/a&gt;, and copy them over on Raspberry Pi.&lt;/p&gt;

&lt;p&gt;It would be really nice if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ npm install&lt;/code&gt; successfully install all the dependencies, and voilà, but it does &lt;strong&gt;not&lt;/strong&gt; work in that way, unfortunately. You still need to set up and install dependencies manually.&lt;/p&gt;

&lt;h3 id=&quot;1-prerequisite-install-cairo-to-the-system&quot;&gt;1. Prerequisite: Install Cairo to the System&lt;/h3&gt;

&lt;p&gt;for cat facial detection, I am using &lt;strong&gt;kittydar&lt;/strong&gt;, which dependencies including &lt;strong&gt;node-canvas&lt;/strong&gt;, which requires &lt;strong&gt;Cairo&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So let’s get Cairo on your Raspbian first.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;libcairo2-dev libjpeg8-dev libpango1.0-dev libgif-dev build-essential g++
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;See more info on how to install Cairo for Node &lt;a href=&quot;https://github.com/Automattic/node-canvas&quot;&gt;Canvas&lt;/a&gt;, see this &lt;a href=&quot;https://github.com/Automattic/node-canvas/wiki/Installation---Ubuntu-and-other-Debian-based-systems&quot;&gt;&lt;em&gt;Installation Ubuntu and other Debian based systems&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you download the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node_modules&lt;/code&gt; contents of my GitHub repo, skip the step 2, and proceed to step 3.
Otherwise, go to the next step to manually fresh-install the next several modules. Just running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm install&lt;/code&gt; to fetch all dependencies may fail because there is some incompatibilities. (I explain it later).&lt;/p&gt;

&lt;h3 id=&quot;2-install-dependency-modules&quot;&gt;2. Install Dependency Modules&lt;/h3&gt;

&lt;p&gt;Now, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd&lt;/code&gt; to your working directry, and install dependencies.&lt;/p&gt;

&lt;h4 id=&quot;install-canvas&quot;&gt;Install Canvas&lt;/h4&gt;

&lt;p&gt;You need canvas (&lt;strong&gt;node-canvas&lt;/strong&gt;) to be able to analyze images with KittyDar.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;canvas
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;install-kittydar&quot;&gt;Install KittyDar&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Kittydar&lt;/strong&gt; is an open-source cat face detection. It takes an image (canvas) and tells you the if cats are in the image.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://res.cloudinary.com/girliemac/image/upload/v1440530252/jrfqcdul46c84qlqlks9.png&quot; alt=&quot;Jamie detected&quot; title=&quot;Jamie detected by KittyDar&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is an actual photo taken by my Raspberry Pi, while Jamie was eating, and detected by KittyDar cat facial detection!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Once your environment is set up, in this RPi-KittyCam dir, install node dependency modules.&lt;/p&gt;

&lt;p&gt;Ideally install from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm install kittydar —save&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;However, node-canvas 1.0.1 (the version specified in package.json for KittyDar) failed to build with the current Node.js (v0.12.6).&lt;/p&gt;

&lt;p&gt;So what I did was download the zip from github repo into &lt;em&gt;node_modules&lt;/em&gt;, alter the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package.json&lt;/code&gt;, where canvas: ~1.0.1 to ^1.0.1 so that the latest canvas is installed as I &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm install&lt;/code&gt; from the kittydar directory.&lt;/p&gt;

&lt;p&gt;Get the zip from &lt;a href=&quot;https://github.com/girliemac/kittydar&quot;&gt;my forked repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: Although, the repo is no longer maintained by the author, I am sending &lt;a href=&quot;https://github.com/harthur/kittydar/pull/27]&quot;&gt;a pull request&lt;/a&gt; for the fix.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;install-johnny-five&quot;&gt;Install Johnny-Five&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Johnny-Five&lt;/strong&gt; is a JavaScript Robotics programming framework. It makes communicating with hardware so much easier.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;johnny-five
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;install-raspi-io&quot;&gt;Install Raspi-io&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Raspi-io&lt;/strong&gt; is a library to be used as an I/O plugin with Johnny-Five. You need to install this to use Johnny-Five on Raspbian.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;raspi-io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3-install-3rd-party-service-modules&quot;&gt;3. Install 3rd Party Service Modules&lt;/h3&gt;

&lt;p&gt;This step is optional, if you don’t want to create a web interface to stream the photos, or you would rather create your own web server without depending on the 3rd party services.&lt;/p&gt;

&lt;h4 id=&quot;install-pubnub&quot;&gt;Install PubNub&lt;/h4&gt;

&lt;p&gt;For realtime live-updating the web interface, I am using PubNub.
To use the service, you need to &lt;a href=&quot;http://pubnub.com&quot;&gt;sign up&lt;/a&gt; to obtain your API keys.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;pubnub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;install-cloudinary&quot;&gt;Install Cloudinary&lt;/h4&gt;

&lt;p&gt;For storing photos, use Cloudinary.
To use the service, you need to &lt;a href=&quot;http://cloudinary.com/&quot;&gt;sign up&lt;/a&gt; to obtain your API keys.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;cloudinary
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;set-up-your-configjs-with-credentials&quot;&gt;Set up your config.js with Credentials&lt;/h4&gt;

&lt;p&gt;Create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.js&lt;/code&gt; in the root dir of the app.
The file should include your API keys:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;cloudinary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;cloud_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;your_name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;api_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;your_API_key&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;api_secret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;your_API_secret&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;pubnub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;subscribe_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;your_sub_key&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;publish_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;your_pub_key&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;4-run-the-code&quot;&gt;4. Run the Code&lt;/h3&gt;

&lt;p&gt;Once you have configured everything and have all source files from my GitHub repo, try running kittyCam.js.&lt;/p&gt;

&lt;p&gt;You must run with sudo:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;node kittyCam.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The camera will take a photo when a motion is detected by the PIR sensor.
Then the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;child_process&lt;/code&gt; runs to detect if there is any cats in the photo.
When there are any cat, it sends the photo to Cloudinary.&lt;/p&gt;

&lt;p&gt;Analyzed photos are deleted from the filesystem to clear up Pi.&lt;/p&gt;

&lt;h3 id=&quot;5-view-the-live-photo-update-on-web&quot;&gt;5. View the Live Photo Update on Web&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Get the web interface source code from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; branch.&lt;/li&gt;
  &lt;li&gt;Run the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.html&lt;/code&gt; on browser&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/girliemac/RPi-KittyCam/gh-pages/images/screenshot.png&quot; alt=&quot;Jamie detected&quot; title=&quot;KittyCam Web&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;walking-through-the-code&quot;&gt;Walking Through the Code&lt;/h2&gt;

&lt;p&gt;Although I am not writing a full tutorial how to write this Node app from scratch, I can explain some of the key features.&lt;/p&gt;

&lt;h3 id=&quot;detecting-motion-from-a-pir-sensor&quot;&gt;Detecting Motion from a PIR Sensor&lt;/h3&gt;

&lt;p&gt;I am using Johnny-Five’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IR.Motion&lt;/code&gt; object to detect the motion.&lt;/p&gt;

&lt;p&gt;First, include the dependencies.&lt;/p&gt;

&lt;p&gt;Then, create a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;motion&lt;/code&gt; hardware instance at pin 7, and when a motion is detected, take a photo:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;raspi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;raspi-io&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;five&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;johnny-five&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;board&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;five&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;raspi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;motion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;five&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Motion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;P1-7&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;motion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;motionstart&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Run raspistill command to take a photo with the camera module  &lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// then detect cats from the photo&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;execute-command-with-child-process&quot;&gt;Execute Command with Child Process&lt;/h3&gt;

&lt;p&gt;In the code snippet above, where the first comment is, run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;raspistill&lt;/code&gt; command using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;child_process.spawn()&lt;/code&gt; to take a photo with the camera module:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;photo/image_&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;.jpg&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;-w&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;320&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;-h&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;240&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;-o&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;-t&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;spawn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;child_process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;raspistill&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;A photo is saved as &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; with exit code, &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Detect cats from photos - see the next section&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, I am saving photos in sequential orders.&lt;/p&gt;

&lt;h3 id=&quot;detect-cat-with-kittydar&quot;&gt;Detect Cat with KittyDar&lt;/h3&gt;

&lt;p&gt;To be able to keep taking photos without interruptions, as each photo is being processed, I am using another &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;child_process&lt;/code&gt;, this time with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fork()&lt;/code&gt;, an instance of spawn thats runs a new instance of the V8 engine to create multiple wrokers.&lt;/p&gt;

&lt;p&gt;After the comment in the code snippet above, read another JS file:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;imgPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;imgPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fork&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;child_process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/detectCatsFromPhoto.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;fork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// the child process is completed&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;fork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;base64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;base64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// send the image to the cloud storage&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;deletePhoto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;imgPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In &lt;strong&gt;detectCatsFromPhoto.js&lt;/strong&gt;, start the child process and use canvas and kittydar to detect cats. Once the process is done, the image is returned in Base64:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kittydar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;kittydar&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Canvas&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;kittydar/node_modules/canvas&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;imgPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;readFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;imgPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//... snip snip, some canvas setup code here...&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cats&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kittydar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;detectCats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;base64Img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;base64Img&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toDataURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;base64Img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To see the entire source code, please take a look at &lt;a href=&quot;https://github.com/girliemac/RPi-KittyCam&quot;&gt;my GitHub repo&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Also to see how I used PubNub to stream the live photos on web browser, look at the source code on the &lt;a href=&quot;https://github.com/girliemac/RPi-KittyCam/tree/gh-pages&quot;&gt;gh-pages branch&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;known-issues&quot;&gt;Known Issues&lt;/h2&gt;

&lt;h3 id=&quot;raspistill-camera-software&quot;&gt;Raspistill (Camera Software)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Raspistill continuously takes a bunch of photos when I set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t = 0&lt;/code&gt; (and crashes Pi while so many child process is running) so I have set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t = 1&lt;/code&gt;, which causes delay. It seems to take only integer. Cats are too fast to wait for a second.&lt;/li&gt;
  &lt;li&gt;The camera can’t capture recognizable pics after the sun is set. The room light is too dark.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;kittydar-cat-facial-recognition&quot;&gt;KittyDar (Cat Facial Recognition)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;During his meal time, when Jamie (my cat) is eating food in his head-down position, the facial detection fails to recognize the cat face shape.&lt;/li&gt;
  &lt;li&gt;When my cat moves, eats from the side of the dish, or put his butt on the camera, it fails to tell me my cat was eating.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;the-cat-photos-failed-to-be-recognized&quot;&gt;The cat photos failed to be recognized&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/girliemac/RPi-KittyCam/master/photo/image_14.jpg&quot; alt=&quot;Jamie undetected&quot; title=&quot;Jamie undetected&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/girliemac/RPi-KittyCam/master/photo/image_150.jpg&quot; alt=&quot;Jamie undetected&quot; title=&quot;Jamie undetected&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/girliemac/RPi-KittyCam/master/photo/image_166.jpg&quot; alt=&quot;Jamie undetected&quot; title=&quot;Jamie undetected&quot; /&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/girliemac/RPi-KittyCam/master/photo/image_311.jpg&quot; alt=&quot;Upside-down Jamie undetected&quot; title=&quot;Jamie undetected&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;omg-i-demod-kittycam-on-live-tv-show&quot;&gt;OMG, I demo’d KittyCam on Live TV Show!&lt;/h2&gt;

&lt;p&gt;See my &lt;a href=&quot;http://www.girliemac.com/blog/2015/09/14/the-screen-savers-show/&quot;&gt;last blog post&lt;/a&gt; about my experience being on Twit TV! You can watch the segment on the &lt;a href=&quot;https://twit.tv/shows/new-screen-savers/episodes/19?autostart=false&quot;&gt;recorded show&lt;/a&gt; too.&lt;/p&gt;

&lt;p&gt;OK, I hope you enjoyed my lengthy blog post!&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.raspberrypi.org/&quot;&gt;Raspberry Pi&lt;/a&gt;: Teach, Learn, and Make with Raspberry Pi&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nathanjohnson320/node_arm&quot;&gt;Node ARM&lt;/a&gt;: Install node.js on a raspberry pi in two easy steps&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://johnny-five.io/&quot;&gt;Johnny-Five&lt;/a&gt;: The original JavaScript Robotics programming framework&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nebrius/raspi-io&quot;&gt;Raspi-IO&lt;/a&gt;: An IO plugin for Johnny-Five that provides support for the Raspberry Pi&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/harthur/kittydar&quot;&gt;KittyDar&lt;/a&gt;: Face detection for cats in JavaScript&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Automattic/node-canvas&quot;&gt;Node Canvas&lt;/a&gt;: A Cairo backed Canvas implementation for NodeJS&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.pubnub.com/&quot;&gt;PubNub&lt;/a&gt;: The global realtime Data Stream Network for IoT, mobile, and web applications&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
	  <title type="html"><![CDATA[Hey, I am on The New Screen Savers Show!]]></title>
	  <link rel="alternate" type="text/html" href="https://laoazhang.cn/blog/2015/09/14/the-screen-savers-show/" />
	  <id>https://laoazhang.cn/blog/2015/09/14/the-screen-savers-show</id>
	  <updated>2015-09-14T00:00:00-07:00</updated>
	  <author>
	    <name>laoazhang</name>
	    <uri>https://laoazhang.cn</uri>
	  </author>
	  <content type="html">&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2015/09/screensavers.jpg&quot; alt=&quot;The Screen Savers&quot; title=&quot;I&apos;m on TV!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OMG, I was live on &lt;a href=&quot;https://twit.tv/shows/new-screen-savers&quot;&gt;&lt;strong&gt;The New Screen Savers Show&lt;/strong&gt; hosted by Leo Leporte&lt;/a&gt; last Saturday! 
If you have watched this show in 90s - the early 2000s, this name must give you such a nostalgic feeling. The show is actually a revival of &lt;a href=&quot;https://en.wikipedia.org/wiki/The_Screen_Savers&quot;&gt;The Screen Savers Show&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Watch me interview by TechCrunch’s Sarah Lane on the recorded video on &lt;a href=&quot;https://twit.tv/shows/new-screen-savers/episodes/19&quot;&gt;&lt;strong&gt;TWiT TV&lt;/strong&gt;&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;You may know that I made to the top page of &lt;a href=&quot;https://news.ycombinator.com/&quot;&gt;Hacker News&lt;/a&gt; (and a bunch of other media) years ago with &lt;strong&gt;HTTP Status Cats&lt;/strong&gt; (Now with the API at &lt;a href=&quot;http://http.cat&quot;&gt;http.cat&lt;/a&gt;, thanks to &lt;a href=&quot;https://twitter.com/rogeriopvl&quot;&gt;Rogério Vicente&lt;/a&gt;), and recently, I made to the top page of Hacker News again with &lt;strong&gt;KittyCam&lt;/strong&gt;, a Raspberry Pi camera with cat facial detection!&lt;/p&gt;

&lt;p&gt;The source code and the instruction of KittyCam is available on &lt;a href=&quot;https://github.com/girliemac/RPi-KittyCam&quot;&gt;GitHub&lt;/a&gt;, and I am planning to write a step-by-step tutorial sometimes soon!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/8daebe6dad7087fb416cd2abb768c71aea6af58a/68747470733a2f2f6c68332e676f6f676c6575736572636f6e74656e742e636f6d2f55754b6c724e51577335774663695271493871695a4b54566f6834587254426134304c44356d5561354d496e3d77313334362d683735372d6e6f&quot; alt=&quot;KittyCam&quot; title=&quot;KittyCam with Jamie&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Jamie detected! 
And Venom detected live on camera on camera at The New Screen Savers!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2015/09/kittycam-web.png&quot; alt=&quot;The Screen Savers&quot; title=&quot;I&apos;m on TV!&quot; /&gt;&lt;/p&gt;
</content>
	</entry>
	
	<entry>
	  <title type="html"><![CDATA[Hardware Hacking for JavaScript Peeps- How I Got My Hands on Breadboards and Resistors]]></title>
	  <link rel="alternate" type="text/html" href="https://laoazhang.cn/blog/2015/05/04/hardware-hacking-for-javascript-developers/" />
	  <id>https://laoazhang.cn/blog/2015/05/04/hardware-hacking-for-javascript-developers</id>
	  <updated>2015-05-04T00:00:00-07:00</updated>
	  <author>
	    <name>laoazhang</name>
	    <uri>https://laoazhang.cn</uri>
	  </author>
	  <content type="html">&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2015/05/imblinking.jpg&quot; alt=&quot;I&apos;m blinking&quot; title=&quot;I&apos;m blinking&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I totally have neglected girliemac.com. I don’t even remember when the last time I blogged for my own website, since I started &lt;a href=&quot;http://www.pubnub.com/blog/author/tomomi/&quot;&gt;writing technical articles and tutorials&lt;/a&gt; for PubNub where I joined last summer.&lt;/p&gt;

&lt;p&gt;Until last year, my focus was mainly on HTML5 and mobile development, however, I am shifting towards Internet of Things movement these days. It is not that I have lost interest on the web standards but I just simply starting geeking out more with hardware.&lt;/p&gt;

&lt;p&gt;I’ve always loved crafty things since I was a kid, and later in my life, I taught myself how to develop web sites, but I have zero background in electrical engineering. (Well, maybe I took some physics 101 or so, but just about it!) I can crochet and code but I didn’t know how to solder or wire. Also, I don’t know how to code in C (or something that I imagined I needed to know to program hardware). I got myself an Arduino Uno a few years ago, but I haven’t even opened the box for a long time.&lt;/p&gt;

&lt;p&gt;So you wonder how I, a front-end web developer, got involved on hardware hacking.&lt;/p&gt;

&lt;h2 id=&quot;i-can-code-in-node-controlling-tessel-with-nodejs&quot;&gt;I Can Code in Node! Controlling Tessel with Node.js&lt;/h2&gt;

&lt;p&gt;Last year, I heard about &lt;a href=&quot;http://tessel.io&quot;&gt;Tessel&lt;/a&gt;. I initially thought it was an another microcontroller that I would never even bothered, but I was so wrong. I gave it a try, and within a few hours after I touched Tessel and a camera module, I was already able to make it take my selfies and tweet it!!!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2015/05/tessel.jpg&quot; alt=&quot;Tessel&quot; title=&quot;Tessel&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are two main reasons why I was able to do so easily:&lt;/p&gt;

&lt;p&gt;First, Tessel runs JavaScript, and because each Tessel contains a built-in wifi chip, internet-enabled JavaScript programs can be run directly from the device. Secondly, Tessel supports easy plug-and-play modules so I don’t have to know how to wire to be able to use sensors. Each module has an open source library on npm, so it’s literally plug, npm install, and play.&lt;/p&gt;

&lt;p&gt;This simple code below snaps photos with Tessel. If you code in Node.js, you can see how easy it is to take a snap with Tessel.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tessel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;tessel&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;camera&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;camera-vc0706&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tessel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;camera&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;camera&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;takePicture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;pic-&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;.jpg&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sendfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;camera&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;disable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;javascript-all-the-things-meet-johnny-five&quot;&gt;JavaScript All The Things! Meet Johnny-Five&lt;/h2&gt;

&lt;p&gt;While I was wondering if Tessel is only microcentroller that runs JavaScript, I met Johnny-Five.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://johnny-five.io/&quot;&gt;Johnny-Five&lt;/a&gt; is an Open Source, Firmata Protocol based, IoT and Robotics programming framework for Node.js, developed by &lt;a href=&quot;https://twitter.com/rwaldron&quot;&gt;Rick Waldron&lt;/a&gt; and his team at Bocoup. (Congrats on the new web launch!)&lt;/p&gt;

&lt;p&gt;What does this mean to me?&lt;/p&gt;

&lt;p&gt;It means I can start playing with other microcontroller in JavaScript, even if they uses some other languages I don’t know, such as Sketch (based on C) for Arduino.&lt;/p&gt;

&lt;p&gt;Johnny-Five is supported by variety of Arduino-compatible Boards, also with using IO plugins, it supports many more boards regardless of the languages and platforms! This makes my hardware-hacking adventure so much easier.&lt;/p&gt;

&lt;p&gt;Thanks to the team, using Johnny-Five is super easy. To blink an LED (in this example, with Auduino Uno), all you need to do is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm install johnny-five&lt;/code&gt; then write in Node.js like this:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;five&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;johnny-five&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;board&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;five&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;led&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;five&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Led&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;led&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;blink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;snapping-littlebits-with-johnny-five&quot;&gt;Snapping littleBits with Johnny-Five&lt;/h2&gt;

&lt;p&gt;A year ago, I bought &lt;a href=&quot;http://www.makershed.com/products/littlebits-arduino-starter-bundle&quot;&gt;littleBits Auduino Starter Bundle&lt;/a&gt;, when they announced the &lt;em&gt;Auduino at Heart&lt;/em&gt; module at MakerFaire.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2015/05/littlebits-kit.jpg&quot; alt=&quot;littleBits&quot; title=&quot;littleBits&quot; /&gt;
&lt;em&gt;My littleBits, photo by my coworker, Eric Grossman&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://littlebits.cc/&quot;&gt;littleBits&lt;/a&gt; is a colorful electric modules with open-source libraries. Like Tessel, assembling the circuit is easy and it doesn’t require wiring. Actually, littleBits is far more kids-friendly that you can snap together with magnets.&lt;/p&gt;

&lt;p&gt;Although littleBits works with no programming, you can snap modules with Arduino and easily incorporate programming into the circuits.&lt;/p&gt;

&lt;p&gt;Thanks to Anna Gerber, who gathered all information and sample code to start &lt;a href=&quot;https://github.com/AnnaGerber/little-bits-js&quot;&gt;programming littleBits with Johnny-Five&lt;/a&gt;, I can program littleBits with JavaScript, too.&lt;/p&gt;

&lt;p&gt;As my first easy and fun project with littleBits &amp;amp; Johnny-Five, I created a &lt;a href=&quot;https://github.com/pubnub/twitter-littlebits-blinky&quot;&gt;Blinking notification of Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I documented and wrote an article about this project, so please check it out on my PubNub blog, &lt;a href=&quot;http://www.pubnub.com/blog/triggering-littlebits-leds-in-realtime-with-node-js-using-johnny-five/&quot;&gt;&lt;strong&gt;Triggering littleBits LEDs with Node.js Using Johnny-Five&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;baking-raspberry-pi-with-johnny-five&quot;&gt;Baking Raspberry Pi with Johnny-Five&lt;/h2&gt;

&lt;p&gt;My next encounter was Raspberry Pi. Luckily, I have handful of hardware-hacking coworkers, who I can bug to ask questions.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.raspberrypi.org&quot;&gt;Raspberry Pi&lt;/a&gt; is a fully-functional single-board computer, rather than a microcontroller, and you can run operating system like Linux and FreeBSD (and Microsoft has announced Windows 10 for Raspberry Pi 2 recently, and &lt;a href=&quot;https://twitter.com/girlie_mac/status/595356675898351616&quot;&gt;I just installed it to try out&lt;/a&gt;!) from a micro SD card. Plug it into a monitor, keyboard, and a mouse, you have a full graphical user-interface of an OS of your choice (I picked &lt;a href=&quot;http://www.raspbian.org/&quot;&gt;Raspbian&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;As usual, I wanted to start with LED blink, which I call &lt;em&gt;Hello World&lt;/em&gt; of hardware. Unlike Tessel and Arduino, RPi board does not come with an LED, so naturally, my initial challenge was to complete the circuit. Here is the challenges (I think) I conquered:&lt;/p&gt;

&lt;p&gt;####First Challenge: Get Familiarize with Breadboards&lt;/p&gt;

&lt;p&gt;There are conductive metal strips goes horizontally on the back of both breadboards, except, for a 400-pin breadboard has positive and negative rails (power rails) that run vertically along the sides.
Once a wire is inserted, the component will be electrically connected to anything else placed in the same row.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2015/05/breadboards.png&quot; alt=&quot;Breadboards&quot; title=&quot;Breadboards&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OK, I got it.&lt;/p&gt;

&lt;h4 id=&quot;next-know-your-led&quot;&gt;Next, Know Your LED&lt;/h4&gt;

&lt;p&gt;LEDs are polarized and only allow current to flow in one direction. The first thing I had to learn was that anode should be connected to the power source, and the cathode should be connected to the ground.
Each LED has two legs, a long one is an anode (+), and a short one is cathode (-).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2015/05/led.png&quot; alt=&quot;Circuit&quot; title=&quot;LED&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;ohms-law-and-resistors&quot;&gt;Ohm’s Law and Resistors&lt;/h4&gt;

&lt;p&gt;But I am not supposed to just plug wires to a power source! Because LED has controlled current, and if I sent one too much voltage, the LED would be burned out. So I need to use resistors to limit the amount of current through an LED.&lt;/p&gt;

&lt;p&gt;The LED I bought on Amazon came with a data sheet, so I can just use the numbers to calculate how much resistor I need:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;R = (Vs-Vf)/I
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Voltage Source (Vs) from RPi is &lt;strong&gt;3.3V&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Forward LED voltage (Vf) is &lt;strong&gt;1.9V&lt;/strong&gt; (According to the data sheet)&lt;/li&gt;
  &lt;li&gt;Current through the LED is &lt;strong&gt;20mA&lt;/strong&gt; = &lt;strong&gt;0.02A&lt;/strong&gt; (Also from data sheet)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, R = (3.3v - 1.9v) / 0.02 = 70Ω&lt;/p&gt;

&lt;p&gt;OK, the package of LEDs I bought came with a bunch of 200Ω resistors, so let’s just use it. The intensity of the light gets lower, but it is safe to use for sure.&lt;/p&gt;

&lt;p&gt;Well, I never imagined some day I became a good friend with Ohm’s Law when I studied it in high school…&lt;/p&gt;

&lt;p&gt;Now I understand how to read this circuit:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2015/05/circuit-led.png&quot; alt=&quot;Circuit&quot; title=&quot;LED circuit&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;understand-gpio-pins&quot;&gt;Understand GPIO Pins&lt;/h4&gt;

&lt;p&gt;Raspberry Pi has the GPIO (General Purpose Input Output) pins, which are a physical interface between the Pi and the outside world. Awesome, I can program the pins to interact the inputs and outputs, for instance, I can send data from sensors and/or to devices such as LEDs!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2015/05/gpio.jpg&quot; alt=&quot;GPIO&quot; title=&quot;GPIO&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;wire-them-up&quot;&gt;Wire Them Up!&lt;/h4&gt;

&lt;p&gt;Now I put them together, build the circuit on a breadboard using wires.&lt;/p&gt;

&lt;p&gt;Use some color convention to avoid confusion:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Black wires for ground&lt;/li&gt;
  &lt;li&gt;Red wires for voltage&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(Or, use gray and pink if you want!)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2015/05/rpi-led.jpg&quot; alt=&quot;LED&quot; title=&quot;LED on&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Initially, I tested with Raspberry Pi’s 3.3V Pin (Red wire) to see if LED lights up just fine, then, re-wire the red wire to a GPIO pin (in this example, GPIO 4, at Physical pin 7; There are two different pin number schemes!) so I could light LED programmatically.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2015/05/fritzing-led-400_bb.png&quot; alt=&quot;Circuit&quot; title=&quot;LED circuit&quot; /&gt;
&lt;em&gt;I used this super awesome open-source tool, &lt;a href=&quot;http://fritzing.org/&quot;&gt;Fritzing&lt;/a&gt; to draw the breadboard!&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;blinking-a-led-with-javascript&quot;&gt;Blinking a LED with JavaScript&lt;/h2&gt;

&lt;p&gt;Finally, it is an easy part- use Johnny-Five again to program the LED.&lt;/p&gt;

&lt;p&gt;To use Johnny-Five with RPi, you need the I/O plugin, &lt;a href=&quot;https://github.com/bryan-m-hughes/raspi-io&quot;&gt;raspi-io&lt;/a&gt;, written by &lt;a href=&quot;https://twitter.com/nebrius&quot;&gt;Bryan Hughes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Manipulating the LED wired to a GPIO is as easy as:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;raspi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;raspi-io&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;five&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;johnny-five&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;board&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;five&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;raspi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;led&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;five&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Led&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;P1-7&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Pin 7 (GPIO 4)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;led&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;blink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ta-da!
I was just a front-end person, writing JavaScript to build web. Now I can write JavaScript to control hardware! How awesome is that?&lt;/p&gt;

&lt;h2 id=&quot;i-hack-hardware-so-you-can-do-too&quot;&gt;I Hack Hardware So You Can Do Too&lt;/h2&gt;

&lt;p&gt;A few wirings (or maybe more) later, I even ran an Internet of Things Workshop with Raspberry Pi for noobs at IoT Stream Conf in April.&lt;/p&gt;

&lt;p&gt;With big helps from my awesome coworkers, &lt;a href=&quot;https://twitter.com/bhavana1110&quot;&gt;Bhavana&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/EM_Grossman&quot;&gt;Eric&lt;/a&gt;, and a Raspberry Pi Evangelist &lt;a href=&quot;https://twitter.com/MattRichardson&quot;&gt;Matt Richardson&lt;/a&gt;, I played as an instructional designer to create a workshop curriculum, also as an instructor at the workshop so I could share my experiences with people who wants to get their hands dirty with Raspberry Pi too.&lt;/p&gt;

&lt;p&gt;If you are interested, you can take a look at the workshop material and docs on &lt;a href=&quot;https://github.com/pubnub/workshop-raspberrypi&quot;&gt;GitHub&lt;/a&gt;. The workshop &lt;a href=&quot;https://docs.google.com/presentation/d/1edIz6OUgDnmFKiACKiL6hcl7GrnW0DHFeGt8KE5dsAw/edit?usp=sharing&quot;&gt;walk-through slides&lt;/a&gt; are available, too.&lt;/p&gt;

&lt;p&gt;Happy hardware hacking!&lt;/p&gt;

&lt;h3 id=&quot;learn-more&quot;&gt;Learn More:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://tessel.io/docs/home&quot;&gt;Tessel Docs&lt;/a&gt; by Technical Machine&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://johnny-five.io/&quot;&gt;Johnny-Five&lt;/a&gt; by Bocoup&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bryan-m-hughes/raspi-io&quot;&gt;Johnny-Five IO plugin for Raspberry Pi&lt;/a&gt; by Bryan Hughes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/AnnaGerber/little-bits-js&quot;&gt;Programming littleBits with Johnny-Five&lt;/a&gt; by Anna Gerber&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.raspberrypi.org/documentation/&quot;&gt;Raspberry Pi Documentations&lt;/a&gt; by Raspberry Pi Foundation&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://learn.adafruit.com/category/learn-raspberry-pi&quot;&gt;Learn Raspberry Pi&lt;/a&gt; by Ada Fruit&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;also-check-them-out&quot;&gt;Also, Check them out:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://tessel.io&quot;&gt;Tessel&lt;/a&gt; by Technical Machine&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://littlebits.cc/&quot;&gt;littleBits&lt;/a&gt; by littleBits Electronics&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.arduino.cc/en/ArduinoAtHeart/HomePage&quot;&gt;Auduino at Heart&lt;/a&gt; by Arduino&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.raspberrypi.org&quot;&gt;Raspberry Pi&lt;/a&gt; by Raspberry Pi Foundation&lt;/li&gt;
&lt;/ul&gt;

</content>
	</entry>
	
	<entry>
	  <title type="html"><![CDATA[Doodle with Strangers! Multi-User HTML5 Canvas with PubNub API]]></title>
	  <link rel="alternate" type="text/html" href="https://laoazhang.cn/blog/2014/09/06/pubnub/" />
	  <id>https://laoazhang.cn/blog/2014/09/06/pubnub</id>
	  <updated>2014-09-06T00:00:00-07:00</updated>
	  <author>
	    <name>laoazhang</name>
	    <uri>https://laoazhang.cn</uri>
	  </author>
	  <content type="html">&lt;p&gt;Note: I originally wrote this article for &lt;a href=&quot;http://www.pubnub.com/blog/multiuser-draw-html5-canvas-tutorial/&quot;&gt;PubNub Blog&lt;/a&gt;, but I am re-posting it with a bit more personal touches here at girliemac.com.&lt;/p&gt;

&lt;p&gt;Well, first of all, I left Nokia for the second time. It has been interesting two years at Nokia Sunnyvale office. One of the best accomplishments there is becoming an open web advocate and worked with W3C while I was there.&lt;/p&gt;

&lt;p&gt;Now, I joined a San Francisco startup, called &lt;a href=&quot;http://www.pubnub.com&quot;&gt;PubNub&lt;/a&gt;, which provides data streaming network. This is quite a change for my career because I have been exclusively working for mobile space, and this is the first time working outside of the industory since 2005.
Playing with data is fun, and I thought using the data with &lt;em&gt;Internet of Things (IoT)&lt;/em&gt; may be more fun, too. Well, I am not really hardware savvy, so I will need to learn more about it.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Yep, I am still a mobile geek, and an open web advocate at heart, naturally my first project at PubNub was about HTML5 web app (that of course supports touch events!). So here’s the digest version of my article. &lt;a href=&quot;http://www.pubnub.com/blog/multiuser-draw-html5-canvas-tutorial/&quot;&gt;For full article, please read it on PubNub&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2014/09/doodle-realtime.gif&quot; alt=&quot;Screencast&quot; title=&quot;CoDoodler Screencast&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This screencast is an actual screencast that I took while some total strangers on the InterWeb were doodling. Just about the time my free version of RecordIt terminated recording, the last person started drwaing “Teh Boobs” &lt;em&gt;[sic] on purpose, supposedly!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;OK, so this tutorial shows you how to create a very simple doodling web app that allows multiple users draw on the canvas at the same time, using PubNub realtime JavaScript API.&lt;/p&gt;

&lt;p&gt;Try this &lt;a href=&quot;http://pubnub.github.io/codoodler/&quot;&gt;demo&lt;/a&gt; first, and continue reading the article and view the &lt;a href=&quot;https://github.com/pubnub/codoodler&quot;&gt;entire source code&lt;/a&gt; on github and the &lt;a href=&quot;http://codepen.io/girliemac/pen/Lxiwm&quot;&gt;simplified code&lt;/a&gt; on Codepen to follow the basic tutorial to fork and tweak by yourself.&lt;/p&gt;

&lt;h2 id=&quot;creating-basic-interactive-drawing-with-canvas&quot;&gt;Creating Basic Interactive Drawing with Canvas&lt;/h2&gt;

&lt;p&gt;Let’s create a drawing canvas.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;canvas id=&quot;drawCanvas&quot; width=&quot;800&quot; height=&quot;600&quot;&amp;gt;&amp;lt;/canvas&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var canvas = document.getElementById(&apos;drawCanvas&apos;);
var ctx = canvas.getContext(&apos;2d&apos;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, take a user input to make the canvas drawable. This is how it works-&lt;/p&gt;

&lt;p&gt;Free-drawing action is initiated when a user clicked on the canvas. A line is drawn dynamically as long as the user is holding the mouse down, and ends when it is released.&lt;/p&gt;

&lt;p&gt;Let’s create some functions, which should be called upon the mouse events on canvas. The events to be observed are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mousedown&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mousemove&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mouseup&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;mousedown&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;startDraw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;mousemove&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;mouseup&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;endDraw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To include touch and pointer events support for touch-screen devices, read my old article, &lt;a href=&quot;http://girliemac.com/blog/2013/04/17/touchy-feely-with-dom-events-rethinking-cross-device-user-interaction/&quot;&gt;Touchy-Feely with DOM Events: Rethinking Cross-Device User Interaction&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, you are going to write a &lt;em&gt;draw&lt;/em&gt; function, which traces the mouse path by collecting the canvas coordinates into an array, then starts drawing the path on canvas with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;beginPath()&lt;/code&gt; method, connect each coordinate with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lineTo()&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stroke()&lt;/code&gt; to complete drawing the path, while a flag, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isActive&lt;/code&gt; is set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// create a flag&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isActive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// array to collect coordinates&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;plots&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isActive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// cross-browser canvas coordinates&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;offsetX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;layerX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;offsetLeft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;offsetY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;layerY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;offsetTop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
  &lt;span class=&quot;nx&quot;&gt;plots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  
  &lt;span class=&quot;nf&quot;&gt;drawOnCanvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;plots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Connecting all the (x, y) coordinates and draw a line by using canvas methods.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;drawOnCanvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;plots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;beginPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;moveTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;plots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;plots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;plots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lineTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;plots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;plots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Write other two functions to toggle the flag. Also empty the array after each line is drawn.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;startDraw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;isActive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;endDraw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;isActive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;// empty the array&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;plots&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Yay, you just have create a very simple drawing web app! Go on to the next step to make it even more interactive.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://girliemac.com/assets/images/articles/2014/09/canvas-draw.png&quot; alt=&quot;simple draw&quot; title=&quot;simple draw&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;making-it-collaborative-with-multiple-users&quot;&gt;Making It Collaborative with Multiple Users&lt;/h2&gt;

&lt;p&gt;Here’s the fun part- you are going to make it as a multi-user app.&lt;/p&gt;

&lt;p&gt;This is where you are going to use &lt;a href=&quot;http://www.pubnub.com&quot;&gt;PubNub&lt;/a&gt; APIs. You don’t need to learn anything special here as long as you’re comfortable with JavaScript. Not even WebSocket knowledge, or node.js.&lt;/p&gt;

&lt;p&gt;OK, so you can make it collabolative by &lt;em&gt;publishing&lt;/em&gt; and &lt;em&gt;subscribing&lt;/em&gt; the drawing path to data stream. Get your &lt;a href=&quot;https://admin.pubnub.com/&quot;&gt;PubNub API keys&lt;/a&gt; ready, if you don’t have one yet, &lt;a href=&quot;http://www.pubnub.com/get-started/&quot;&gt;sign up&lt;/a&gt; to get your own unique keys.&lt;/p&gt;

&lt;p&gt;When you are ready, include the JavaScript libraries in your HTML to begin.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://cdn.pubnub.com/pubnub.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Initialize the API.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;my-draw-demo&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pubnub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PUBNUB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;publish_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;your-publish-key&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;subscribe_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;your-subscribe-key&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;publish-and-subscribe&quot;&gt;Publish and Subscribe&lt;/h3&gt;

&lt;p&gt;In the last step, you have created an array that hold all canvas coordinates. In this step, you are going to send one user’s drawing path data to PubNub network, also receive path data from other users.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://girliemac.com/assets/images/articles/2014/09/publish-subscribe.png&quot; alt=&quot;Publish and Subscribe&quot; title=&quot;PubNub Data Stream&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To send data, all you have to do is broadcast the array to the channel with one of the data stream APIs, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;publish()&lt;/code&gt;. Simply add these lines of code in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;endDraw()&lt;/code&gt; function, just before emptying array.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;pubnub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    	&lt;span class=&quot;na&quot;&gt;plots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;plots&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// your array goes here&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To retrieve the published data, you simply need &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subscribe()&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;pubnub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  	&lt;span class=&quot;na&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;drawFromStream&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Once you successfully retrieve the data object from the stream, call the callback function to draw lines from the received array data on canvas, just like you did in the last step.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;drawFromStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		
  	
  	&lt;span class=&quot;nx&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;beginPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  	&lt;span class=&quot;nf&quot;&gt;drawOnCanvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;plots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ta-da, you just have create a very simple multi-user canvas app!&lt;/p&gt;

&lt;p&gt;If you are interested in, read on the entire tutorial, at &lt;a href=&quot;http://www.pubnub.com/blog/multiuser-draw-html5-canvas-tutorial/&quot;&gt;PubNub Blog&lt;/a&gt;!&lt;/p&gt;

</content>
	</entry>
	
	<entry>
	  <title type="html"><![CDATA[Responsive Web Made Easier with Chrome DevTools Device Mode]]></title>
	  <link rel="alternate" type="text/html" href="https://laoazhang.cn/blog/2014/07/28/devicemode/" />
	  <id>https://laoazhang.cn/blog/2014/07/28/devicemode</id>
	  <updated>2014-07-28T00:00:00-07:00</updated>
	  <author>
	    <name>laoazhang</name>
	    <uri>https://laoazhang.cn</uri>
	  </author>
	  <content type="html">&lt;p&gt;Note: I originally wrote this article for &lt;a href=&quot;http://html5experts.jp/girlie_mac/8384/&quot;&gt;HTML5Experts.jp&lt;/a&gt; in Japanese, as a part of their Google I/O special editions. This blog post is more of the abridged version of my original article, which uses more actual quotes (translated) from Google I/O.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;device-mode&quot;&gt;Device Mode&lt;/h2&gt;

&lt;p&gt;Last month at Google I/O, &lt;a href=&quot;http://paulbakaus.com&quot;&gt;Paul Bakaus&lt;/a&gt; introduced a set of brand-new (still experimental) tools, called &lt;em&gt;Device Mode&lt;/em&gt; for Chrome DevTools. Currently, this feature is only available on Chrome Canary (v38 and newer).&lt;/p&gt;

&lt;p&gt;The Device Mode comes with presets of device information including screen width, height, and device pixel ratio from popular devices, like Nexus 5 and Samsung Galaxy series, and makes responsively designed web development easy for us.&lt;/p&gt;

&lt;h2 id=&quot;media-queries-tool&quot;&gt;Media-Queries Tool&lt;/h2&gt;

&lt;p&gt;Once you open DevTools in Chrome Canary, you see a little device icon on left in tab bar at the top. By clicking the icon, the regular webpage display pane becomes the device mode. Here you can resize the window along the ruler UI, or choose one of the devices from a dropdown menu. If you choose a device with a large resolution, you can make the screen shrinks to fit in the display pane too. Also, switching its orientaion by swapping the width and height values by clicking the toggle icon.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2014/07/devtools-device-mode-1.gif&quot; alt=&quot;devicemode01&quot; title=&quot;Device Mode&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What I found more useful in this Device Mode is the Media-queries tool. Clicking the icon at the left side of the device presets (the one looks like steps), you get the visual representations of the media-queries used for the page. Select one of these bars from the UI and right-click it gives you a select menu that says “Reveal In Source Code”, so mouseover it to view all CSS file paths. Click a file to inspect the source code!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2014/07/devtools-device-mode-2.gif&quot; alt=&quot;devicemode02&quot; title=&quot;Media-queries&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Apparently, with another new feature called Workspace, you can edit the media-queries on DevTools directly, and the changes reflect to the local file systems on the fly.&lt;/p&gt;

&lt;h2 id=&quot;connectivity&quot;&gt;Connectivity&lt;/h2&gt;

&lt;p&gt;The new tool comes with the network emulation presets as well. From the dropdown next to the device menu, you can pick mobile networks like 3G and EDGE to emulate the connectivity, and make performance testing easier.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2014/07/devtools-device-mode-3.gif&quot; alt=&quot;devicemode03&quot; title=&quot;Network&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;remote-debugging-with-screencast&quot;&gt;Remote Debugging with Screencast&lt;/h2&gt;

&lt;p&gt;There is a newer addition to the Device Mode- a better screencasting feature. This obscure feature has been intruduced to Chrome DevTools already a while ago, but the new and improved features just landed to Canary as an experimental tool. This new screencast comes with Canary build 38.0.2101.0 and newer.&lt;/p&gt;

&lt;p&gt;To use the experimental features, you need to enable the &lt;em&gt;DevTools Experiments&lt;/em&gt; from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chrome://flags/#enable-devtools-experiments&lt;/code&gt;. Then open the DevTools and click the gear icon to manually turn on the screencast feature.&lt;/p&gt;

&lt;p&gt;Also, you need to &lt;a href=&quot;https://developer.chrome.com/devtools/docs/remote-debugging#setting-up-device&quot;&gt;enable USB Debug mode&lt;/a&gt; on your Android device.&lt;/p&gt;

&lt;p&gt;Once you connect a deivice to your desktop with a USB cable, you should see an little device icon with “1”, which indicates the number of devices connected. Then click “Try Here” button to open a screencast window.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2014/07/devtools-device-mode-screencast.jpg&quot; alt=&quot;screencast&quot; title=&quot;Screencast&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Typing a URL onto the DevTools reflects on your device. Your device should launch the web page on Chrome.
And you should be able to navigate the page from both device and the screencast. 
Clicking “Layers” tab gives you a visualized DOM layers to measure rendering and painting. You can pinpoint where painting jankiness occurs with another new feature, Paint Profiler too!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2014/07/devtools-device-mode-screencast.gif&quot; alt=&quot;screencast&quot; title=&quot;Screencast&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;takeaways&quot;&gt;Takeaways&lt;/h2&gt;

&lt;p&gt;Here is a list of the DevTools new features for mobile development:&lt;/p&gt;

&lt;p&gt;Responsive Layouts&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rich reprresentsation of media-queries&lt;/li&gt;
  &lt;li&gt;Style filtering&lt;/li&gt;
  &lt;li&gt;Media-queries editting&lt;/li&gt;
  &lt;li&gt;Inline emulation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Rich Emulaton&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Device presets for most popular devices&lt;/li&gt;
  &lt;li&gt;Rich viewport emulation&lt;/li&gt;
  &lt;li&gt;Sensor emulation (touch, geolocation, accelerometer)&lt;/li&gt;
  &lt;li&gt;Network throttling and offline&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Remote Debugging&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Plug and play&lt;/li&gt;
  &lt;li&gt;Existing but more powerful features&lt;/li&gt;
  &lt;li&gt;Screencast&lt;/li&gt;
  &lt;li&gt;Port forwarding&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am pretty exited with the cool new features, and hoping it to be more polished to make available for the stable Chrome release soon. Keep up the great work, Chrome team!&lt;/p&gt;

</content>
	</entry>
	
	<entry>
	  <title type="html"><![CDATA[IndexedDB is finally something]]></title>
	  <link rel="alternate" type="text/html" href="https://laoazhang.cn/blog/2014/07/03/indexeddb/" />
	  <id>https://laoazhang.cn/blog/2014/07/03/indexeddb</id>
	  <updated>2014-07-03T00:00:00-07:00</updated>
	  <author>
	    <name>laoazhang</name>
	    <uri>https://laoazhang.cn</uri>
	  </author>
	  <content type="html">&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2014/07/coremob-camera-idb.png&quot; alt=&quot;screenshot&quot; title=&quot;IndexedDB in Coremob Camera app&quot; /&gt;
“Woo-hoo, finally!!!” (I should stop being grumpy!)&lt;/p&gt;

&lt;p&gt;This was the first reaction I had when I heard the new on Twitter about Chromium started supporting blob on IndexedDB. And now I know it is official after seeing the &lt;a href=&quot;http://updates.html5rocks.com/2014/07/Blob-support-for-IndexedDB-landed-on-Chrome-Dev&quot;&gt;blog post on HTML5 Rocks&lt;/a&gt; by a Chrome developer advocate, also a good friend of mine, Eiji Kitamura.&lt;/p&gt;

&lt;p&gt;Why was I so excited? Because I have been waited this for 1.5 years since I started writing &lt;strong&gt;Coremob Camera&lt;/strong&gt;. When I started this project, IndexedDB support was super spotty, and I felt Firefox for Android was my only friend who listened to me. (FirefoxOS wasn’t quite there yet).&lt;/p&gt;

&lt;h2 id=&quot;coremob-camera&quot;&gt;Coremob Camera&lt;/h2&gt;

&lt;p&gt;If you have seen me talking at conferences before, you may have heard about Coremob Camera, the open web standards project I was working on, although I failed to thoroughly document it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/coremob/camera/&quot;&gt;Coremob Camera&lt;/a&gt; is a web project that mostly I and Tobie Langel worked on for W3C’s Core Mobile Community Group (now &lt;a href=&quot;http://www.w3.org/Mobile/IG/&quot;&gt;Web and Mobile Interest Group&lt;/a&gt;) to showcase the capability of the web platform, especially on mobile devices. We were hoping to help web developers out there to learn about HTML5 use cases, as well as help improve web browsers.&lt;/p&gt;

&lt;h2 id=&quot;the-state-of-indexeddb&quot;&gt;The State of IndexedDB&lt;/h2&gt;

&lt;p&gt;One of the key features we focused as a real-life use case is &lt;a href=&quot;http://www.w3.org/TR/IndexedDB/&quot;&gt;IndexedDB&lt;/a&gt;. The good new was that Internet Explorer 10 supported IndexedDB. The bad news was that Safari had no plan of supporting it, also IndexedDB API was pretty new and unstable at that time the project started. Actually, bad news overwhelmed the good news.&lt;/p&gt;

&lt;p&gt;I talked about my agony at &lt;strong&gt;W3Conf&lt;/strong&gt; (&lt;a href=&quot;https://www.youtube.com/watch?v=3Afi-v-m_Gc&quot;&gt;video&lt;/a&gt;) last year, then bitterly joked about complete lack of support by Apple, and IndexedDB was not ready to use, at &lt;strong&gt;All Your Base Conf&lt;/strong&gt; (&lt;a href=&quot;https://vimeo.com/83837733&quot;&gt;video&lt;/a&gt;, Also the slides below).&lt;/p&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;bda5d8c019b201318b443620859eaef1&quot; data-ratio=&quot;1.6&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;My biggest tormenters were:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;No adequate browser support (missing in Safari, Android stock, Presto-Opera)&lt;/li&gt;
  &lt;li&gt;Vendor prefix&lt;/li&gt;
  &lt;li&gt;Chaotic coexistence of deprecated specs and new specs on supported browsers
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setVersion()&lt;/code&gt; vs. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onupgradeneeded&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IDBTransaction.READ_WRITE&lt;/code&gt; vs. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;readwrite&quot;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Chrome uses string for version instead of number&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;No blob support (Only Firefox supported)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The specifications have been modified multiple times. For example with Firefox’s case, the basic iDB support started in version 4, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setVersion()&lt;/code&gt; was deprecated at ver 10, and transaction mode has been switched to string from constant since 13. For mobile support (Firefox’s earliest Android support was ver 16-ish), I could just stick with the latest specs; however, Chrome came to the iDB space later with slightly older specifications.&lt;/p&gt;

&lt;p&gt;Because I never knew which specifications and features were supported on what browsers, also annoying issue such as Chrome’s silent failure when trying to store blobs, I had to use a bunch of feature detections and  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try&lt;/code&gt; / &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;catch&lt;/code&gt; for fail-proof for the buggy Chrome 18 and Blackberry 10 (which was less PITA than Chrome).&lt;/p&gt;

&lt;h3 id=&quot;chromes-fashionably-late-mobile-debut&quot;&gt;Chrome’s Fashionably Late Mobile Debut&lt;/h3&gt;

&lt;p&gt;It’s 2014 now, and this year’s Google I/O was all about Android-
It is almost unbelievable for you when I say Chrome was fashionably late to the Android party. But the truth is, Chrome was not even available until late 2012, at version 18.&lt;/p&gt;

&lt;p&gt;Despite the fact that Google ships Chrome quite often (along with Beta, Dev, and Canary nightly release) for desktop, I never could have any updates for my Nexus 4, during the time of the Coremob Camera development. After I patiently waited, good news came to me finally in March 2013. It was Chrome 25! Yes, there was a big gap between 18 and 25.&lt;/p&gt;

&lt;p&gt;Ever since, Google constantly releases Beta version for Android as well.&lt;/p&gt;

&lt;h3 id=&quot;awesome-chrome-dev-tools&quot;&gt;Awesome Chrome Dev Tools&lt;/h3&gt;

&lt;p&gt;Besides the lack of blob supports, I have been always a big fan of Chrome’s &lt;em&gt;DevTools&lt;/em&gt;. As well as DOM and CSS debugging, and monitoring performance, you can inspect web storages too. Visualizing the contents in your IndexedDB is easy with Chrome.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2014/07/devtools.gif&quot; alt=&quot;devtools&quot; title=&quot;Inspect iDB on Chrome DevTools&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;to-blob-or-not-to-blob&quot;&gt;To Blob or Not to Blob&lt;/h2&gt;

&lt;p&gt;Blob support was somehow important for me, because Coremob Camera is all about photos. In the app scenario, the user flow is as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Take a picture via &lt;strong&gt;HTML Media Capture&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FileReader()&lt;/code&gt; to return the picture as an object&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drawImage()&lt;/code&gt; to draw the image object in canvas&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getImageData()&lt;/code&gt; to get an ImageData object containing a copy of the pixel data, then alter the pixels&lt;/li&gt;
  &lt;li&gt;Store the &lt;strong&gt;blob&lt;/strong&gt; locally with &lt;strong&gt;IndexedDB&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Upload the final photo with &lt;strong&gt;XHR2&lt;/strong&gt; over &lt;strong&gt;CORS&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;(Whoa, I successfully gave you a bunch of HTML5 use cases in a single web app, right!?)&lt;/p&gt;

&lt;p&gt;For the step 5, since only Firefox was supporting blob in IndexedDB, I had to use Base64 data URL strings for unsupported browsers. Me, grumpy grumpy.&lt;/p&gt;

&lt;h2 id=&quot;good-news-and-more-good-news&quot;&gt;Good news and more good news&lt;/h2&gt;

&lt;p&gt;So, I felt like it has been a long time (a long InterWeb years) since I started using IndexedDB experimentally.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2014/07/wwdc.png&quot; alt=&quot;WWDC&quot; title=&quot;Safari 8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At this year’s WWDC, Apple announced new features coming to Safari 8, including yes, IndexedDB support!&lt;/p&gt;

&lt;p&gt;And I am delighted with the arrival of Chrome 37, which has blob support for IndexedDB!&lt;/p&gt;

&lt;p&gt;IndexedDB is finally something.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2014/07/cry.png&quot; alt=&quot;yes&quot; title=&quot;Finally!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note: Currently, Chrome 37 (Dev) is not available on Android yet! Until then, you can try &lt;a href=&quot;http://coremob.github.io/camera/vanilla/index.html&quot;&gt;Coremob Camera&lt;/a&gt; on desktop!&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;W3C &lt;a href=&quot;http://www.w3.org/TR/IndexedDB/&quot;&gt;Indexed Database API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Can I use &lt;a href=&quot;http://caniuse.com/indexeddb&quot;&gt;IndexedDB?&lt;/a&gt;?&lt;/li&gt;
&lt;/ul&gt;

</content>
	</entry>
	
	<entry>
	  <title type="html"><![CDATA[Web Notifications Update]]></title>
	  <link rel="alternate" type="text/html" href="https://laoazhang.cn/blog/2014/03/21/notifications/" />
	  <id>https://laoazhang.cn/blog/2014/03/21/notifications</id>
	  <updated>2014-03-21T00:00:00-07:00</updated>
	  <author>
	    <name>laoazhang</name>
	    <uri>https://laoazhang.cn</uri>
	  </author>
	  <content type="html">&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2014/03/notifications.png&quot; alt=&quot;screenshot&quot; title=&quot;Web notification&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Two years ago, I &lt;a href=&quot;http://girliemac.com/blog/2012/03/29/creating-non-disruptive-notifications-with-html5/&quot;&gt;wrote a demo and blogged&lt;/a&gt; about then-Chrome-only HTML5 notifications. A while ago, like, 8 Chrome versions ago, I’ve noticed the demo no longer worked, because the &lt;a href=&quot;http://www.chromium.org/developers/design-documents/desktop-notifications/api-specification&quot;&gt;original specication&lt;/a&gt; I was using was deprecated for good.&lt;/p&gt;

&lt;p&gt;Around the time, started by Apple first, each browser vendors had its own proprietary notifications API, then last year, they have decided to standardized specification.&lt;/p&gt;

&lt;p&gt;I finally read the &lt;a href=&quot;http://www.w3.org/TR/notifications&quot;&gt;new specifications on W3C&lt;/a&gt; recently, and rewrote the demo using the standard API.&lt;/p&gt;

&lt;h2 id=&quot;new-and-simplified-specs&quot;&gt;New and Simplified Specs&lt;/h2&gt;

&lt;p&gt;In the original demo, I implemented the notifications in &lt;em&gt;webOS 3.0-style&lt;/em&gt; UX, which allowed a user to swipe to close the window. (Do you remember HP TouchPad, which was killed soon after the release and gone on fire-sale? I was a UI engineer for the beautiful dead platform.) However, &lt;a href=&quot;http://girliemac.com/html5-notifications-webOS-style/&quot;&gt;this v2 demo&lt;/a&gt; no longer supports the swipable notifications UI because the simplified new Web Notifications spcification only allows text and icon, and external HTML (with JS) files are no longer permitted.&lt;/p&gt;

&lt;h2 id=&quot;demo&quot;&gt;Demo&lt;/h2&gt;

&lt;p&gt;Check out the new demo: &lt;a href=&quot;http://girliemac.com/html5-notifications-webOS-style/&quot;&gt;http://girliemac.com/html5-notifications-webOS-style&lt;/a&gt; (I keep the webOS system config look-and-feel!)&lt;/p&gt;

&lt;p&gt;The simplified standard uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Notification&lt;/code&gt; object to represent each notification. (No &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;webkit&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;moz&lt;/code&gt; vendor prefixes are required for the supported browsers.)&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;notification&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Notification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;YOLO!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;request-permission&quot;&gt;Request Permission&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2014/03/permission.png&quot; alt=&quot;screenshot&quot; title=&quot;Web notification&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Notifications can only be displayed if the user has granted permission. Requesting the user agent to ask a user for permission is done as follows:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Notification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;requestPermission&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This process is done asynchronously, and the callback function is called when the user chooses a permission either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;granted&lt;/code&gt;, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;denied&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;displaying-notifications&quot;&gt;Displaying Notifications&lt;/h3&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Notification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;permission&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;granted&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Notification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Meeting&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;March 21 3:30 PM&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;icon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;calendar.png&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2014/03/notification-window.png&quot; alt=&quot;screenshot&quot; title=&quot;Notifications on Chrome&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;events&quot;&gt;Events&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Notification&lt;/code&gt; fires &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;show&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;close&lt;/code&gt; events during the lifecycle.&lt;/p&gt;

&lt;p&gt;To close the notification window after 15 seconds:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onshow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;nf&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;supported-browsers&quot;&gt;Supported Browsers&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Firefox 22+ (both desktop and mobile)&lt;/li&gt;
  &lt;li&gt;Chrome 32+ (Desktop only)&lt;/li&gt;
  &lt;li&gt;Safari 6+ on Mac 10.8+ (Damnit, I need to upgrade my Mac to test!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As long as I tested, the web notifications API is disabled on Chrome for mobile, while Firefox does support the feature (however, it has a UI issue).&lt;/p&gt;

&lt;h2 id=&quot;known-problems&quot;&gt;Known Problems&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Chrome for Android does not support the feature&lt;/li&gt;
  &lt;li&gt;Firefox on Android does support, however, only one line (the last line) is displayed on the native notification bar on top. No extra UI or window from browser. (tested on Firefox 29. Bug filed #986785.)&lt;/li&gt;
  &lt;li&gt;On Chrome (tested on 33), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;close()&lt;/code&gt; method does not seem to work. Notification windows fails to close automatically. (Bug filed #355214).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;firefox-on-android&quot;&gt;Firefox on Android&lt;/h3&gt;

&lt;p&gt;Notifications appear in the native notification bar, one at a time, instead of popup windows from browser.&lt;/p&gt;

&lt;p&gt;The problem is that if a notificatin contains more than one lines one messages (when both main text and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;body&lt;/code&gt; are set), only the last line (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;body&lt;/code&gt;) is displayed, instead of the main title, which I think makes more sense. When the notification bar is expanded by a user, both subject and body text are visible (See the screenshot below).&lt;/p&gt;

&lt;p&gt;Also, custom icons aren’t shown either. The icon on the notification is always Firefox icon.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2014/03/notifications-moz.png&quot; alt=&quot;screenshot&quot; title=&quot;Notifications from Firefox on Android&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;W3C &lt;a href=&quot;http://www.w3.org/TR/notifications&quot;&gt;Web Notifications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;WHATWG &lt;a href=&quot;http://notifications.spec.whatwg.org/&quot;&gt;Notifications AP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Can I use &lt;a href=&quot;http://caniuse.com/notifications&quot;&gt;Web Notifications&lt;/a&gt;?&lt;/li&gt;
  &lt;li&gt;MDN &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAPI/Using_Web_Notifications&quot;&gt;Using Web Notifications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Apple Safari Developer Library &lt;a href=&quot;https://developer.apple.com/library/safari/documentation/AppleApplications/Conceptual/SafariJSProgTopics/Articles/SendingNotifications.html&quot;&gt;Sending Notifications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
	</entry>
	

</feed>
